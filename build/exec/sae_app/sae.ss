#!/usr/local/bin/chez --script

; @generated
(import (chezscheme))
(case (machine-type)
  [(i3le ti3le a6le ta6le) (load-shared-object "libc.so.6")]
  [(i3osx ti3osx a6osx ta6osx) (load-shared-object "libc.dylib")]
  [(i3nt ti3nt a6nt ta6nt) (load-shared-object "msvcrt.dll")                           (load-shared-object "ws2_32.dll")]
  [else (load-shared-object "libc.so")])



(let ()
(define (blodwen-os)
  (case (machine-type)
    [(i3le ti3le a6le ta6le) "unix"]  ; GNU/Linux
    [(i3ob ti3ob a6ob ta6ob) "unix"]  ; OpenBSD
    [(i3fb ti3fb a6fb ta6fb) "unix"]  ; FreeBSD
    [(i3nb ti3nb a6nb ta6nb) "unix"]  ; NetBSD
    [(i3osx ti3osx a6osx ta6osx) "darwin"]
    [(i3nt ti3nt a6nt ta6nt) "windows"]
    [else "unknown"]))

(define blodwen-read-args (lambda (desc)
  (case (vector-ref desc 0)
    ((0) '())
    ((1) (cons (vector-ref desc 2)
               (blodwen-read-args (vector-ref desc 3)))))))
(define b+ (lambda (x y bits) (remainder (+ x y) (ash 1 bits))))
(define b- (lambda (x y bits) (remainder (- x y) (ash 1 bits))))
(define b* (lambda (x y bits) (remainder (* x y) (ash 1 bits))))
(define b/ (lambda (x y bits) (remainder (exact-floor (/ x y)) (ash 1 bits))))

(define integer->bits8 (lambda (x) (modulo x (expt 2 8))))
(define integer->bits16 (lambda (x) (modulo x (expt 2 16))))
(define integer->bits32 (lambda (x) (modulo x (expt 2 32))))
(define integer->bits64 (lambda (x) (modulo x (expt 2 64))))

(define bits16->bits8 (lambda (x) (modulo x (expt 2 8))))
(define bits32->bits8 (lambda (x) (modulo x (expt 2 8))))
(define bits32->bits16 (lambda (x) (modulo x (expt 2 16))))
(define bits64->bits8 (lambda (x) (modulo x (expt 2 8))))
(define bits64->bits16 (lambda (x) (modulo x (expt 2 16))))
(define bits64->bits32 (lambda (x) (modulo x (expt 2 32))))

(define blodwen-bits-shl (lambda (x y bits) (remainder (ash x y) (ash 1 bits))))
(define blodwen-shl (lambda (x y) (ash x y)))
(define blodwen-shr (lambda (x y) (ash x (- y))))
(define blodwen-and (lambda (x y) (logand x y)))
(define blodwen-or (lambda (x y) (logor x y)))
(define blodwen-xor (lambda (x y) (logxor x y)))

(define cast-num
  (lambda (x)
    (if (number? x) x 0)))
(define destroy-prefix
  (lambda (x)
    (cond
      ((equal? x "") "")
      ((equal? (string-ref x 0) #\#) "")
      (else x))))
(define exact-floor
  (lambda (x)
    (inexact->exact (floor x))))
(define cast-string-int
  (lambda (x)
    (exact-floor (cast-num (string->number (destroy-prefix x))))))
(define cast-int-char
  (lambda (x)
    (if (and (>= x 0)
             (<= x #x10ffff))
        (integer->char x)
        0)))
(define cast-string-double
  (lambda (x)
    (cast-num (string->number (destroy-prefix x)))))

(define (from-idris-list xs)
  (if (= (vector-ref xs 0) 0)
    '()
    (cons (vector-ref xs 1) (from-idris-list (vector-ref xs 2)))))
(define (string-pack xs) (apply string (from-idris-list xs)))
(define (to-idris-list-rev acc xs)
  (if (null? xs)
    acc
    (to-idris-list-rev (vector 1 (car xs) acc) (cdr xs))))
(define (string-unpack s) (to-idris-list-rev (vector 0) (reverse (string->list s))))
(define (string-concat xs) (apply string-append (from-idris-list xs)))
(define string-cons (lambda (x y) (string-append (string x) y)))
(define get-tag (lambda (x) (vector-ref x 0)))
(define string-reverse (lambda (x)
  (list->string (reverse (string->list x)))))
(define (string-substr off len s)
    (let* ((l (string-length s))
          (b (max 0 off))
          (x (max 0 len))
          (end (min l (+ b x))))
          (if (> b l)
              ""
              (substring s b end))))

(define (blodwen-string-iterator-new s)
  0)

(define (blodwen-string-iterator-next s ofs)
  (if (>= ofs (string-length s))
      (vector 0)  ; EOF
      (vector 1 (string-ref s ofs) (+ ofs 1))))

(define either-left
  (lambda (x)
    (vector 0 x)))

(define either-right
  (lambda (x)
    (vector 1 x)))

(define blodwen-error-quit
  (lambda (msg)
    (display msg)
    (newline)
    (exit 1)))

(define (blodwen-get-line p)
    (if (port? p)
        (let ((str (get-line p)))
            (if (eof-object? str)
                ""
                str))
        void))

(define (blodwen-get-char p)
    (if (port? p)
        (let ((chr (get-char p)))
            (if (eof-object? chr)
                #\nul
                chr))
        void))

;; Buffers

(define (blodwen-new-buffer size)
  (make-bytevector size 0))

(define (blodwen-buffer-size buf)
  (bytevector-length buf))

(define (blodwen-buffer-setbyte buf loc val)
  (bytevector-u8-set! buf loc val))

(define (blodwen-buffer-getbyte buf loc)
  (bytevector-u8-ref buf loc))

(define (blodwen-buffer-setbits16 buf loc val)
  (bytevector-u16-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits16 buf loc)
  (bytevector-u16-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits32 buf loc val)
  (bytevector-u32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits32 buf loc)
  (bytevector-u32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits64 buf loc val)
  (bytevector-u64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits64 buf loc)
  (bytevector-u64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint32 buf loc val)
  (bytevector-s32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint32 buf loc)
  (bytevector-s32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint buf loc val)
  (bytevector-s64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint buf loc)
  (bytevector-s64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setdouble buf loc val)
  (bytevector-ieee-double-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getdouble buf loc)
  (bytevector-ieee-double-ref buf loc (native-endianness)))

(define (blodwen-stringbytelen str)
  (bytevector-length (string->utf8 str)))

(define (blodwen-buffer-setstring buf loc val)
  (let* [(strvec (string->utf8 val))
         (len (bytevector-length strvec))]
    (bytevector-copy! strvec 0 buf loc len)))

(define (blodwen-buffer-getstring buf loc len)
  (let [(newvec (make-bytevector len))]
    (bytevector-copy! buf loc newvec 0 len)
    (utf8->string newvec)))

(define (blodwen-buffer-copydata buf start len dest loc)
  (bytevector-copy! buf start dest loc len))

;; Threads

(define blodwen-thread-data (make-thread-parameter #f))

(define (blodwen-thread p)
    (fork-thread (lambda () (p (vector 0)))))

(define (blodwen-get-thread-data ty)
  (blodwen-thread-data))

(define (blodwen-set-thread-data a)
  (blodwen-thread-data a))

(define (blodwen-mutex) (make-mutex))
(define (blodwen-lock m) (mutex-acquire m))
(define (blodwen-unlock m) (mutex-release m))
(define (blodwen-thisthread) (get-thread-id))

(define (blodwen-condition) (make-condition))
(define (blodwen-condition-wait c m) (condition-wait c m))
(define (blodwen-condition-wait-timeout c m t)
  (let ((sec (div t 1000000))
        (micro (mod t 1000000)))
  (condition-wait c m (make-time 'time-duration (* 1000 micro) sec))))
(define (blodwen-condition-signal c) (condition-signal c))
(define (blodwen-condition-broadcast c) (condition-broadcast c))

(define-record future-internal (result ready mutex signal))
(define (blodwen-make-future work)
  (let ([future (make-future-internal #f #f (make-mutex) (make-condition))])
    (fork-thread (lambda ()
      (let ([result (work)])
        (with-mutex (future-internal-mutex future)
          (set-future-internal-result! future result)
          (set-future-internal-ready! future #t)
          (condition-broadcast (future-internal-signal future))))))
    future))
(define (blodwen-await-future ty future)
  (let ([mutex (future-internal-mutex future)])
    (with-mutex mutex
      (if (not (future-internal-ready future))
          (condition-wait (future-internal-signal future) mutex))
      (future-internal-result future))))

(define (blodwen-sleep s) (sleep (make-time 'time-duration 0 s)))
(define (blodwen-usleep s)
  (let ((sec (div s 1000000))
        (micro (mod s 1000000)))
       (sleep (make-time 'time-duration (* 1000 micro) sec))))

(define (blodwen-time) (time-second (current-time)))
(define (blodwen-clock-time-utc) (current-time 'time-utc))
(define (blodwen-clock-time-monotonic) (current-time 'time-monotonic))
(define (blodwen-clock-time-duration) (current-time 'time-duration))
(define (blodwen-clock-time-process) (current-time 'time-process))
(define (blodwen-clock-time-thread) (current-time 'time-thread))
(define (blodwen-clock-time-gccpu) (current-time 'time-collector-cpu))
(define (blodwen-clock-time-gcreal) (current-time 'time-collector-real))
(define (blodwen-is-time? clk) (if (time? clk) 1 0))
(define (blodwen-clock-second time) (time-second time))
(define (blodwen-clock-nanosecond time) (time-nanosecond time))

(define (blodwen-args)
  (define (blodwen-build-args args)
    (if (null? args)
        (vector 0) ; Prelude.List
        (vector 1 (car args) (blodwen-build-args (cdr args)))))
    (blodwen-build-args (command-line)))

(define (blodwen-hasenv var)
  (if (eq? (getenv var) #f) 0 1))

(define (blodwen-system cmd)
  (system cmd))

;; Randoms
(define random-seed-register 0)
(define (initialize-random-seed-once)
  (if (= (virtual-register random-seed-register) 0)
      (let ([seed (time-nanosecond (current-time))])
        (set-virtual-register! random-seed-register seed)
        (random-seed seed))))

(define (blodwen-random-seed seed)
  (set-virtual-register! random-seed-register seed)
  (random-seed seed))
(define blodwen-random
  (case-lambda
    ;; no argument, pick a real value from [0, 1.0)
    [() (begin
          (initialize-random-seed-once)
          (random 1.0))]
    ;; single argument k, pick an integral value from [0, k)
    [(k)
      (begin
        (initialize-random-seed-once)
        (if (> k 0)
              (random k)
              (assertion-violationf 'blodwen-random "invalid range argument ~a" k)))]))

;; For finalisers

(define blodwen-finaliser (make-guardian))
(define (blodwen-register-object obj proc)
  (let [(x (cons obj proc))]
       (blodwen-finaliser x)
       x))
(define blodwen-run-finalisers
  (lambda ()
    (let run ()
      (let ([x (blodwen-finaliser)])
        (when x
          (((cdr x) (car x)) 'erased)
          (run))))))
(define PrimIO-prim__nullAnyPtr (lambda (farg-0) ((foreign-procedure #f "idris2_isNull" (void*) int) farg-0)))
(define PreludeC-45IO-prim__putStr (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_putStr" (string) void) farg-0) (vector 0 )))
(define PreludeC-45IO-prim__getString (lambda (farg-0) ((foreign-procedure #f "idris2_getString" (void*) string) farg-0)))
(define DataC-45Strings-fastConcat (lambda (farg-0) (string-concat farg-0)))
(define SystemC-45Directory-prim__openDir (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_openDir" (string) void*) farg-0)))
(define SystemC-45Directory-prim__fileErrno (lambda (farg-0) ((foreign-procedure #f "idris2_fileErrno" () int) )))
(define SystemC-45Directory-prim__dirEntry (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_nextDirEntry" (void*) void*) farg-0)))
(define SystemC-45Directory-prim__currentDir (lambda (farg-0) ((foreign-procedure #f "idris2_currentDirectory" () void*) )))
(define SystemC-45Directory-prim__changeDir (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_changeDir" (string) int) farg-0)))
(define SystemC-45File-prim__writeLine (lambda (farg-0 farg-1 farg-2) ((foreign-procedure #f "idris2_writeLine" (void* string) int) farg-0 farg-1)))
(define SystemC-45File-prim__readLine (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_readLine" (void*) void*) farg-0)))
(define SystemC-45File-prim__open (lambda (farg-0 farg-1 farg-2) ((foreign-procedure #f "idris2_openFile" (string string) void*) farg-0 farg-1)))
(define SystemC-45File-prim__fileErrno (lambda (farg-0) ((foreign-procedure #f "idris2_fileErrno" () int) )))
(define SystemC-45File-prim__eof (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_eof" (void*) int) farg-0)))
(define SystemC-45File-prim__close (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_closeFile" (void*) void) farg-0) (vector 0 )))
(define prim__add_Int (lambda (arg-0 arg-1) (b+ arg-0 arg-1 63)))
(define prim__add_Integer (lambda (arg-0 arg-1) (+ arg-0 arg-1)))
(define prim__sub_Int (lambda (arg-0 arg-1) (b- arg-0 arg-1 63)))
(define prim__sub_Integer (lambda (arg-0 arg-1) (- arg-0 arg-1)))
(define prim__mul_Integer (lambda (arg-0 arg-1) (* arg-0 arg-1)))
(define prim__lt_Int (lambda (arg-0 arg-1) (or (and (< arg-0 arg-1) 1) 0)))
(define prim__lt_Integer (lambda (arg-0 arg-1) (or (and (< arg-0 arg-1) 1) 0)))
(define prim__lte_Int (lambda (arg-0 arg-1) (or (and (<= arg-0 arg-1) 1) 0)))
(define prim__lte_Integer (lambda (arg-0 arg-1) (or (and (<= arg-0 arg-1) 1) 0)))
(define prim__lte_Char (lambda (arg-0 arg-1) (or (and (char<=? arg-0 arg-1) 1) 0)))
(define prim__eq_Int (lambda (arg-0 arg-1) (or (and (= arg-0 arg-1) 1) 0)))
(define prim__eq_Integer (lambda (arg-0 arg-1) (or (and (= arg-0 arg-1) 1) 0)))
(define prim__eq_Char (lambda (arg-0 arg-1) (or (and (char=? arg-0 arg-1) 1) 0)))
(define prim__eq_String (lambda (arg-0 arg-1) (or (and (string=? arg-0 arg-1) 1) 0)))
(define prim__gte_Integer (lambda (arg-0 arg-1) (or (and (>= arg-0 arg-1) 1) 0)))
(define prim__gte_Char (lambda (arg-0 arg-1) (or (and (char>=? arg-0 arg-1) 1) 0)))
(define prim__gt_Integer (lambda (arg-0 arg-1) (or (and (> arg-0 arg-1) 1) 0)))
(define prim__gt_Char (lambda (arg-0 arg-1) (or (and (char>? arg-0 arg-1) 1) 0)))
(define prim__strLength (lambda (arg-0) (string-length arg-0)))
(define prim__strHead (lambda (arg-0) (string-ref arg-0 0)))
(define prim__strIndex (lambda (arg-0 arg-1) (string-ref arg-0 arg-1)))
(define prim__strCons (lambda (arg-0 arg-1) (string-cons arg-0 arg-1)))
(define prim__strAppend (lambda (arg-0 arg-1) (string-append arg-0 arg-1)))
(define prim__strSubstr (lambda (arg-0 arg-1 arg-2) (string-substr arg-0 arg-1 arg-2)))
(define prim__believe_me (lambda (arg-0 arg-1 arg-2) arg-2))
(define prim__cast_IntString (lambda (arg-0) (number->string arg-0)))
(define prim__cast_IntInteger (lambda (arg-0) arg-0))
(define prim__cast_CharInteger (lambda (arg-0) (char->integer arg-0)))
(define prim__cast_IntegerInt (lambda (arg-0) arg-0))
(define prim__cast_CharInt (lambda (arg-0) (char->integer arg-0)))
(define Main-case--generateIpkg2-1104 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (PreludeC-45IO-print 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067))) (vector 0 (lambda (x) (SystemC-45File-show_Show__FileError x)) (lambda (d) (lambda (x) (SystemC-45File-showPrec_Show__FileError d x))))) e-2))) (else (PreludeC-45IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067))) (PreludeC-45TypesC-45Strings-C-43C-43 "Generated: " arg-4)))))))
(define Main-case--generateIpkg2-1078 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-0)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (vector 0 e-0 e-1 e-2 e-3 arg-2))))))))
(define Main-main (lambda (ext-0) (let ((act-24 ((PreludeC-45Interfaces-C-60C-36C-62 'erased 'erased 'erased (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (lambda (eta-4) (PreludeC-45IO-map_Functor__IO 'erased 'erased eta-2 eta-3 eta-4)))))) (lambda (eta-0) (DataC-45Maybe-fromMaybe 'erased (lambda () "/") eta-0)) (SystemC-45Directory-currentDir 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067))))) ext-0))) (let ((act-25 ((SystemC-45File-readFile 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-25 (arg-644 eta-0))) ((arg-645 act-25) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067))) "Eq.yml") ext-0))) ((Main-loadConfig act-24 act-25) ext-0)))))
(define Main-loadConfig (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (PreludeC-45IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067))) (PreludeC-45TypesC-45Strings-C-43C-43 (SystemC-45File-show_Show__FileError e-2) ": Eq.yml")))) (else (let ((e-5 (vector-ref sc0 1))) (PreludeC-45Types-either 'erased 'erased 'erased (lambda () (lambda (eta-0) (PreludeC-45IO-print 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-24 (arg-644 eta-1))) ((arg-645 act-24) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7067) arg-7067))) (vector 0 (lambda (x) (PreludeC-45Show-show_Show__String x)) (lambda (d) (lambda (x) (PreludeC-45Show-showPrec_Show__String d x))))) eta-0))) (lambda () (lambda (eta-0) (lambda (eta-1) (Main-generateIpkg2 arg-0 (Config-yamlToConfig (Builtin-fst 'erased 'erased eta-0)) eta-1)))) (DataC-45StringC-45Parser-parse 'erased (lambda (eta-0) (Parser-yamlObject eta-0)) e-5))))))))
(define Main-generateIpkg2 (lambda (arg-0 arg-1 ext-0) (let ((act-24 (Config-modulesFromSourcedir (let ((sc0 arg-1)) (let ((e-3 (vector-ref sc0 4))) e-3)) ext-0))) (let ((ipkg (Config-configToIpkg (let ((sc0 arg-1)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (vector 0 e-0 e-1 e-2 e-3 act-24))))))))) (let ((ipkgPath (PreludeC-45TypesC-45Strings-C-43C-43 arg-0 (PreludeC-45TypesC-45Strings-C-43C-43 "/" (PreludeC-45TypesC-45Strings-C-43C-43 (let ((sc0 arg-1)) (let ((e-0 (vector-ref sc0 1))) e-0)) ".ipkg"))))) (let ((act-25 ((SystemC-45File-writeFile 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-25 (arg-644 eta-0))) ((arg-645 act-25) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067))) ipkgPath ipkg) ext-0))) (let ((sc0 act-25)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) ((PreludeC-45IO-print 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-26 (arg-644 eta-0))) ((arg-645 act-26) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067))) (vector 0 (lambda (x) (SystemC-45File-show_Show__FileError x)) (lambda (d) (lambda (x) (SystemC-45File-showPrec_Show__FileError d x))))) e-2) ext-0))) (else ((PreludeC-45IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-26 (arg-644 eta-0))) ((arg-645 act-26) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067))) (PreludeC-45TypesC-45Strings-C-43C-43 "Generated: " ipkgPath)) ext-0))))))))))
(define Config-case--modulesFromSourcedir-959 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 0 ))) (else (lambda (eta-0) (let ((act-24 ((PreludeC-45Types-traverse_Traversable__List 'erased 'erased 'erased (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (eta-1) (lambda (eta-2) (Config-modulesFromSourcedir eta-1 eta-2))) arg-6) eta-0))) (PreludeC-45TypesC-45List-C-43C-43 'erased arg-8 ((PreludeC-45Interfaces-concat 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-10) (lambda (arg-11) (PreludeC-45Types-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased arg-10 arg-11))) (PreludeC-45Types-neutral_Monoid__C-40ListC-32C-36aC-41 'erased)))) act-24)))))))))
(define Config-case--getDirs-815 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 0 ))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((SystemC-45Directory-changeDir 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-24 (arg-644 eta-1))) ((arg-645 act-24) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7067) arg-7067))) arg-0) eta-0))) (let ((act-25 ((PreludeC-45Interfaces-C-60C-36C-62 'erased 'erased 'erased (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (lambda (eta-4) (lambda (eta-5) (PreludeC-45IO-map_Functor__IO 'erased 'erased eta-3 eta-4 eta-5)))))) (lambda (eta-1) (DataC-45List-filter 'erased (lambda (x) (PreludeC-45Basics-C-38C-38 (PreludeC-45EqOrd-C-47C-61_Eq__String x ".") (lambda () (PreludeC-45EqOrd-C-47C-61_Eq__String x "..")))) eta-1)) (lambda (eta-1) (Config-n--3087-753-getDirsC-39 arg-0 e-5 eta-1))) eta-0))) act-25)))))))))
(define Config-case--getDirsC-44getDirsC-39-768 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 0 ))) (else (let ((e-5 (vector-ref sc0 1))) (PreludeC-45Interfaces-C-60C-36C-62 'erased 'erased 'erased (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (lambda (eta-4) (PreludeC-45IO-map_Functor__IO 'erased 'erased eta-2 eta-3 eta-4)))))) (lambda (arg-3) (PreludeC-45TypesC-45List-C-43C-43 'erased (vector 1 e-5 (vector 0 )) arg-3)) (lambda (eta-0) (Config-n--3087-753-getDirsC-39 arg-0 arg-1 eta-0)))))))))
(define Config-case--configToIpkg-732 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) "") (else (PreludeC-45TypesC-45Strings-C-43C-43 "modules = " (DataC-45StringC-45Extra-join 'erased "\xa;        , " (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldl_Foldable__List 'erased 'erased func init input))))))) (let ((sc1 arg-0)) (let ((e-4 (vector-ref sc1 5))) e-4)))))))))
(define Config-case--configToIpkg-713 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) #\_) (else arg-1)))))
(define Config-case--yamlToConfig-618 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (vector 0 e-0 e-1))))))
(define Config-n--3087-753-getDirsC-39 (lambda (arg-0 arg-1 ext-0) (let ((act-24 ((SystemC-45Directory-dirEntry 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067))) arg-1) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-5 (vector-ref sc0 1))) ((PreludeC-45Interfaces-C-60C-36C-62 'erased 'erased 'erased (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (lambda (eta-4) (PreludeC-45IO-map_Functor__IO 'erased 'erased eta-2 eta-3 eta-4)))))) (lambda (arg-2) (PreludeC-45TypesC-45List-C-43C-43 'erased (vector 1 e-5 (vector 0 )) arg-2)) (lambda (eta-0) (Config-n--3087-753-getDirsC-39 arg-0 arg-1 eta-0))) ext-0))))))))
(define ConfigC-45Config-rf--version (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-1 (vector-ref sc0 2))) e-1))))
(define ConfigC-45Config-rf--sourcedir (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-3 (vector-ref sc0 4))) e-3))))
(define ConfigC-45Config-rf--package (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-0 (vector-ref sc0 1))) e-0))))
(define ConfigC-45Config-rf--modules (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-4 (vector-ref sc0 5))) e-4))))
(define Config-yamlToConfig (lambda (arg-0) (let ((list (PreludeC-45Types-map_Functor__List 'erased 'erased (lambda (lamc-0) (let ((sc0 lamc-0)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (vector 0 e-0 e-1))))) arg-0))) (let ((package (DataC-45Maybe-fromMaybe 'erased (lambda () "default") (DataC-45List-lookup 'erased 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq__String arg-4 arg-5)))) "package" list)))) (let ((version (DataC-45Maybe-fromMaybe 'erased (lambda () "0.0.0") (DataC-45List-lookup 'erased 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq__String arg-4 arg-5)))) "version" list)))) (let ((target (DataC-45Maybe-fromMaybe 'erased (lambda () "chez") (DataC-45List-lookup 'erased 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq__String arg-4 arg-5)))) "target" list)))) (let ((sourcedir (DataC-45Maybe-fromMaybe 'erased (lambda () "src") (DataC-45List-lookup 'erased 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq__String arg-4 arg-5)))) "sourcedir" list)))) (vector 0 package version target sourcedir (vector 0 )))))))))
(define Config-modulesFromSourcedir (lambda (arg-0 ext-0) (let ((act-24 ((SystemC-45Directory-changeDir 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067))) arg-0) ext-0))) (let ((act-25 ((SystemC-45Directory-currentDir 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-25 (arg-644 eta-0))) ((arg-645 act-25) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067)))) ext-0))) (let ((dir (DataC-45Maybe-fromMaybe 'erased (lambda () "/") act-25))) (let ((act-26 (Config-getDirs dir ext-0))) (let ((idrisFiles (DataC-45List-filter 'erased (lambda (eta-0) (DataC-45Strings-isSuffixOf ".idr" eta-0)) act-26))) (let ((restFiles (DataC-45List-filter 'erased (lambda (eta-0) (PreludeC-45Basics-not (DataC-45Strings-isSuffixOf ".idr" eta-0))) act-26))) (let ((act-27 ((PreludeC-45Types-traverse_Traversable__List 'erased 'erased 'erased (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (eta-0) (SystemC-45File-readFile 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-1) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-1)))))) (lambda (a) (lambda (arg-482) (lambda (eta-1) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-1) (let ((act-17 (arg-483 eta-1))) (let ((act-16 (arg-485 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-1) (let ((act-27 (arg-644 eta-1))) ((arg-645 act-27) eta-1))))))) (lambda (a) (lambda (arg-647) (lambda (eta-1) (let ((act-51 (arg-647 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-7067) arg-7067))) eta-0)) idrisFiles) ext-0))) (let ((modules (PreludeC-45Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Builtin-fst 'erased 'erased eta-0)) (DataC-45Either-rights 'erased 'erased (PreludeC-45Types-map_Functor__List 'erased 'erased (lambda (eta-0) (DataC-45StringC-45Parser-parse 'erased (lambda (eta-1) (Parser-moduleDecl eta-1)) eta-0)) (DataC-45Either-rights 'erased 'erased act-27)))))) ((Config-case--modulesFromSourcedir-959 arg-0 act-24 act-25 dir act-26 idrisFiles restFiles act-27 modules (PreludeC-45Types-C-61C-61_Eq__C-40ListC-32C-36aC-41 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq__String arg-4 arg-5)))) act-26 (vector 0 ))) ext-0)))))))))))
(define Config-getDirs (lambda (arg-0 ext-0) (let ((act-24 ((SystemC-45Directory-openDir 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067))) arg-0) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((SystemC-45Directory-changeDir 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-25 (arg-644 eta-0))) ((arg-645 act-25) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067))) arg-0) ext-0))) (let ((act-26 ((PreludeC-45Interfaces-C-60C-36C-62 'erased 'erased 'erased (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (lambda (eta-4) (PreludeC-45IO-map_Functor__IO 'erased 'erased eta-2 eta-3 eta-4)))))) (lambda (eta-0) (DataC-45List-filter 'erased (lambda (x) (PreludeC-45Basics-C-38C-38 (PreludeC-45EqOrd-C-47C-61_Eq__String x ".") (lambda () (PreludeC-45EqOrd-C-47C-61_Eq__String x "..")))) eta-0)) (lambda (eta-0) (Config-n--3087-753-getDirsC-39 arg-0 e-5 eta-0))) ext-0))) act-26)))))))))
(define Config-configToIpkg (lambda (arg-0) ((PreludeC-45Interfaces-concatMap 'erased 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Types-C-60C-43C-62_Semigroup__String arg-2 arg-3))) (PreludeC-45Types-neutral_Monoid__String))) (lambda (arg-1) (PreludeC-45TypesC-45Strings-C-43C-43 arg-1 "\xa;"))) (vector 1 (PreludeC-45TypesC-45Strings-C-43C-43 "package " (PreludeC-45TypesC-45Strings-C-43C-43 (let ((sc0 arg-0)) (let ((e-0 (vector-ref sc0 1))) e-0)) (PreludeC-45TypesC-45Strings-C-43C-43 "-" (PreludeC-45TypesC-45Strings-C-43C-43 (PreludeC-45Types-pack (PreludeC-45Types-map_Functor__List 'erased 'erased (lambda (x) (Config-case--configToIpkg-713 arg-0 x (PreludeC-45EqOrd-C-61C-61_Eq__Char x #\.))) (PreludeC-45Types-unpack (let ((sc0 arg-0)) (let ((e-1 (vector-ref sc0 2))) e-1))))) "\xa;")))) (vector 1 (PreludeC-45TypesC-45Strings-C-43C-43 "sourcedir = \"" (PreludeC-45TypesC-45Strings-C-43C-43 (let ((sc0 arg-0)) (let ((e-3 (vector-ref sc0 4))) e-3)) "\"")) (vector 1 (Config-case--configToIpkg-732 arg-0 (PreludeC-45Types-C-61C-61_Eq__Nat (PreludeC-45TypesC-45List-length 'erased (let ((sc0 arg-0)) (let ((e-4 (vector-ref sc0 5))) e-4))) (PreludeC-45Types-fromInteger_Num__Nat 0))) (vector 0 )))))))
(define Parser-yamlString (lambda (ext-0) (DataC-45StringC-45Parser-C-62C-62C-61_Monad__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (DataC-45StringC-45Parser-takeWhile1 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (lambda (arg-0) (PreludeC-45EqOrd-C-47C-61_Eq__Char arg-0 #\:))) (lambda (key) (lambda (eta-0) (DataC-45StringC-45Parser-C-62C-62C-61_Monad__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (lambda (eta-1) (DataC-45StringC-45Parser-char 'erased (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) #\: eta-1)) (lambda (_-406) (lambda (eta-1) (DataC-45StringC-45Parser-C-62C-62C-61_Monad__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (lambda (eta-2) (DataC-45StringC-45Parser-spaces1 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) eta-2)) (lambda (_-415) (lambda (eta-2) (DataC-45StringC-45Parser-C-62C-62C-61_Monad__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (DataC-45StringC-45Parser-takeWhile1 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (lambda (arg-0) (PreludeC-45EqOrd-C-47C-61_Eq__Char arg-0 (integer->char 10)))) (lambda (val) (lambda (eta-3) (DataC-45StringC-45Parser-C-62C-62C-61_Monad__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (Parser-newlines) (lambda (_-437) (lambda (eta-4) (DataC-45StringC-45Parser-pure_Applicative__C-40ParseTC-32C-36mC-41 'erased 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (vector 0 key val) eta-4))) eta-3))) eta-2))) eta-1))) eta-0))) ext-0)))
(define Parser-yamlObject (lambda (ext-0) (DataC-45StringC-45Parser-many 'erased 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (lambda (eta-0) (Parser-yamlString eta-0)) ext-0)))
(define Parser-newlines (lambda () (DataC-45StringC-45Parser-skip 'erased 'erased (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased eta-2 eta-3))))) (lambda (eta-0) (DataC-45StringC-45Parser-many 'erased 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (lambda (eta-1) (DataC-45StringC-45Parser-char 'erased (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (integer->char 10) eta-1)) eta-0)))))
(define Parser-moduleDecl (lambda (ext-0) (DataC-45StringC-45Parser-C-62C-62C-61_Monad__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (Parser-newlines) (lambda (_-465) (lambda (eta-0) (DataC-45StringC-45Parser-C-62C-62C-61_Monad__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (lambda (eta-1) (DataC-45StringC-45Parser-string 'erased (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) "module" eta-1)) (lambda (_-480) (lambda (eta-1) (DataC-45StringC-45Parser-C-62C-62C-61_Monad__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (DataC-45StringC-45Parser-spaces 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647))))) (lambda (_-489) (lambda (eta-2) (DataC-45StringC-45Parser-C-62C-62C-61_Monad__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (DataC-45StringC-45Parser-takeWhile 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) (lambda (arg-0) (PreludeC-45EqOrd-C-47C-61_Eq__Char arg-0 (integer->char 10)))) (lambda (name) (lambda (eta-3) (DataC-45StringC-45Parser-pure_Applicative__C-40ParseTC-32C-36mC-41 'erased 'erased (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647)))) name eta-3))) eta-2))) eta-1))) eta-0))) ext-0)))
(define PreludeC-45Basics-C-124C-124 (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 0) (else (arg-1))))))
(define PreludeC-45Basics-not (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 1) (else 0)))))
(define PreludeC-45Basics-intToBool (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45Basics-id (lambda (arg-0 arg-1) arg-1))
(define PreludeC-45Basics-const (lambda (arg-0 arg-1 arg-2 ext-0) arg-2))
(define PreludeC-45Basics-C-46 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (arg-3 (arg-4 ext-0))))
(define PreludeC-45Basics-C-38C-38 (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (arg-1)) (else 1)))))
(define Builtin-fromString_FromString__String (lambda (arg-0) arg-0))
(define Builtin-__Impl_FromString_String (lambda (ext-0) ext-0))
(define Builtin-snd (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-3 (vector-ref sc0 2))) e-3))))
(define Builtin-fst (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) e-2))))
(define Builtin-fromString (lambda (arg-0 arg-1 ext-0) (arg-1 ext-0)))
(define Builtin-believe_me (lambda (arg-0 arg-1 ext-0) ext-0))
(define Builtin-assert_total (lambda (arg-0 arg-1) arg-1))
(define PreludeC-45Types-case--unpackC-44unpackC-39-4330 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) arg-1) (else (PreludeC-45Types-n--4160-4318-unpackC-39 arg-0 (PreludeC-45Num-C-45_Neg__Int arg-3 1) arg-2 (vector 1 (string-ref arg-2 arg-3) arg-1)))))))
(define PreludeC-45Types-case--substr-4272 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (string-substr arg-2 arg-1 arg-0)) (else "")))))
(define PreludeC-45Types-case--max-753 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45Types-case--min-739 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45Types-case--integerToNat-628 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 0) (else (+ 1 (PreludeC-45Types-prim__integerToNat (- arg-0 1))))))))
(define PreludeC-45Types-case--prim__integerToNat-614 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (Builtin-believe_me 'erased 'erased arg-0)) (else 0)))))
(define PreludeC-45Types-n--4160-4318-unpackC-39 (lambda (arg-0 arg-1 arg-2 arg-3) (PreludeC-45Types-case--unpackC-44unpackC-39-4330 arg-0 arg-3 arg-2 arg-1 (PreludeC-45EqOrd-C-60_Ord__Int arg-1 0))))
(define PreludeC-45Types-traverse_Traversable__List (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-3)) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-3)) (let ((e-4 (vector-ref sc1 3))) ((((e-4 'erased) 'erased) (let ((sc2 arg-3)) (let ((e-6 (vector-ref sc2 3))) ((((e-6 'erased) 'erased) (let ((sc3 arg-3)) (let ((e-10 (vector-ref sc3 2))) ((e-10 'erased) (lambda (eta-0) (lambda (eta-1) (vector 1 eta-0 eta-1))))))) (arg-4 e-2))))) (PreludeC-45Types-traverse_Traversable__List 'erased 'erased 'erased arg-3 arg-4 e-3)))))))))))
(define PreludeC-45Types-neutral_Monoid__String (lambda () ""))
(define PreludeC-45Types-neutral_Monoid__C-40ListC-32C-36aC-41 (lambda (arg-0) (vector 0 )))
(define PreludeC-45Types-min_Ord__Nat (lambda (arg-0 arg-1) (PreludeC-45Types-case--min-739 arg-1 arg-0 (PreludeC-45Types-C-60_Ord__Nat arg-0 arg-1))))
(define PreludeC-45Types-max_Ord__Nat (lambda (arg-0 arg-1) (PreludeC-45Types-case--max-753 arg-1 arg-0 (PreludeC-45Types-C-62_Ord__Nat arg-0 arg-1))))
(define PreludeC-45Types-map_Functor__List (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 (arg-2 e-2) (PreludeC-45Types-map_Functor__List 'erased 'erased arg-2 e-3)))))))))
(define PreludeC-45Types-fromInteger_Num__Nat (lambda (arg-0) (PreludeC-45Types-prim__integerToNat arg-0)))
(define PreludeC-45Types-foldr_Foldable__List (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) ((arg-2 e-2) (PreludeC-45Types-foldr_Foldable__List 'erased 'erased arg-2 arg-3 e-3)))))))))
(define PreludeC-45Types-foldl_Foldable__List (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (PreludeC-45Types-foldl_Foldable__List 'erased 'erased arg-2 ((arg-2 arg-3) e-2) e-3))))))))
(define PreludeC-45Types-compare_Ord__Nat (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 1)(else 0))))(else (let ((e-0 (- arg-0 1))) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 2)(else (let ((e-2 (- arg-1 1))) (PreludeC-45Types-compare_Ord__Nat e-0 e-2)))))))))))
(define PreludeC-45Types-__Impl_Traversable_List (lambda () (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (PreludeC-45Types-map_Functor__List 'erased 'erased func arg-149))))) (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldl_Foldable__List 'erased 'erased func init input))))))) (lambda (b) (lambda (a) (lambda (f) (lambda (i_con-0) (lambda (arg-1362) (lambda (arg-1364) (PreludeC-45Types-traverse_Traversable__List 'erased 'erased 'erased i_con-0 arg-1362 arg-1364))))))))))
(define PreludeC-45Types-__Impl_Semigroup_String (lambda (ext-0 ext-1) (PreludeC-45Types-C-60C-43C-62_Semigroup__String ext-0 ext-1)))
(define PreludeC-45Types-__Impl_Semigroup_C-40ListC-32C-36aC-41 (lambda (arg-0 ext-0 ext-1) (PreludeC-45Types-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased ext-0 ext-1)))
(define PreludeC-45Types-__Impl_Ord_Nat (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Types-C-61C-61_Eq__Nat arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45Types-C-47C-61_Eq__Nat arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (PreludeC-45Types-compare_Ord__Nat arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (PreludeC-45Types-C-60_Ord__Nat arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (PreludeC-45Types-C-62_Ord__Nat arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (PreludeC-45Types-C-60C-61_Ord__Nat arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (PreludeC-45Types-C-62C-61_Ord__Nat arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (PreludeC-45Types-max_Ord__Nat arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (PreludeC-45Types-min_Ord__Nat arg-381 arg-382))))))
(define PreludeC-45Types-__Impl_Num_Nat (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Types-C-43_Num__Nat arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45Types-C-42_Num__Nat arg-4 arg-5))) (lambda (arg-6) (PreludeC-45Types-fromInteger_Num__Nat arg-6)))))
(define PreludeC-45Types-__Impl_Monoid_String (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Types-C-60C-43C-62_Semigroup__String arg-2 arg-3))) (PreludeC-45Types-neutral_Monoid__String))))
(define PreludeC-45Types-__Impl_Monoid_C-40ListC-32C-36aC-41 (lambda (arg-0) (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Types-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased arg-2 arg-3))) (PreludeC-45Types-neutral_Monoid__C-40ListC-32C-36aC-41 'erased))))
(define PreludeC-45Types-__Impl_Functor_List (lambda (ext-0 ext-1 ext-2 ext-3) (PreludeC-45Types-map_Functor__List 'erased 'erased ext-2 ext-3)))
(define PreludeC-45Types-__Impl_Foldable_List (lambda () (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (PreludeC-45Types-foldl_Foldable__List 'erased 'erased func init input)))))))))
(define PreludeC-45Types-__Impl_Eq_Nat (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Types-C-61C-61_Eq__Nat arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45Types-C-47C-61_Eq__Nat arg-4 arg-5))))))
(define PreludeC-45Types-__Impl_Eq_C-40ListC-32C-36aC-41 (lambda (arg-0 arg-1) (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Types-C-61C-61_Eq__C-40ListC-32C-36aC-41 'erased arg-1 arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45Types-C-47C-61_Eq__C-40ListC-32C-36aC-41 'erased arg-1 arg-4 arg-5))))))
(define PreludeC-45Types-C-62_Ord__Nat (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-61C-61_Eq__Ordering (PreludeC-45Types-compare_Ord__Nat arg-0 arg-1) 2)))
(define PreludeC-45Types-C-62C-61_Ord__Nat (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-47C-61_Eq__Ordering (PreludeC-45Types-compare_Ord__Nat arg-0 arg-1) 0)))
(define PreludeC-45Types-C-61C-61_Eq__Nat (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 0)(else 1))))(else (let ((e-0 (- arg-0 1))) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 1)(else (let ((e-1 (- arg-1 1))) (PreludeC-45Types-C-61C-61_Eq__Nat e-0 e-1)))))))))))
(define PreludeC-45Types-C-61C-61_Eq__C-40ListC-32C-36aC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-3)) (case (vector-ref sc1 0) ((0) 0)(else 1)))) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-3)) (case (vector-ref sc1 0) ((1) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (PreludeC-45Basics-C-38C-38 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) ((e-1 e-2) e-6))) (lambda () (PreludeC-45Types-C-61C-61_Eq__C-40ListC-32C-36aC-41 'erased arg-1 e-3 e-7))))))(else 1))))))(else 1)))))
(define PreludeC-45Types-C-60_Ord__Nat (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-61C-61_Eq__Ordering (PreludeC-45Types-compare_Ord__Nat arg-0 arg-1) 0)))
(define PreludeC-45Types-C-60C-61_Ord__Nat (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-47C-61_Eq__Ordering (PreludeC-45Types-compare_Ord__Nat arg-0 arg-1) 2)))
(define PreludeC-45Types-C-60C-43C-62_Semigroup__String (lambda (ext-0 ext-1) (PreludeC-45TypesC-45Strings-C-43C-43 ext-0 ext-1)))
(define PreludeC-45Types-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 (lambda (arg-0 ext-0 ext-1) (PreludeC-45TypesC-45List-C-43C-43 'erased ext-0 ext-1)))
(define PreludeC-45Types-C-47C-61_Eq__Nat (lambda (arg-0 arg-1) (PreludeC-45Basics-not (PreludeC-45Types-C-61C-61_Eq__Nat arg-0 arg-1))))
(define PreludeC-45Types-C-47C-61_Eq__C-40ListC-32C-36aC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (PreludeC-45Basics-not (PreludeC-45Types-C-61C-61_Eq__C-40ListC-32C-36aC-41 'erased arg-1 arg-2 arg-3))))
(define PreludeC-45Types-C-43_Num__Nat (lambda (ext-0 ext-1) (+ ext-0 ext-1)))
(define PreludeC-45Types-C-42_Num__Nat (lambda (ext-0 ext-1) (* ext-0 ext-1)))
(define PreludeC-45Types-unpack (lambda (arg-0) (PreludeC-45Types-n--4160-4318-unpackC-39 arg-0 (PreludeC-45Num-C-45_Neg__Int (PreludeC-45TypesC-45Strings-length arg-0) 1) arg-0 (vector 0 ))))
(define PreludeC-45Types-substr (lambda (arg-0 arg-1 arg-2) (PreludeC-45Types-case--substr-4272 arg-2 arg-1 arg-0 (PreludeC-45EqOrd-C-60_Ord__Integer arg-0 (PreludeC-45TypesC-45Strings-length arg-2)))))
(define PreludeC-45Types-strCons (lambda (ext-0 ext-1) (string-cons ext-0 ext-1)))
(define PreludeC-45Types-prim__integerToNat (lambda (arg-0) (PreludeC-45Types-case--prim__integerToNat-614 arg-0 (let ((sc0 (or (and (<= 0 arg-0) 1) 0))) (cond ((equal? sc0 0) 1)(else 0))))))
(define PreludeC-45Types-plus (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) arg-1)(else (let ((e-0 (- arg-0 1))) (+ 1 (+ e-0 arg-1))))))))
(define PreludeC-45Types-pack (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) "") (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (PreludeC-45Types-strCons e-2 (PreludeC-45Types-pack e-3)))))))))
(define PreludeC-45Types-natToInteger (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 0)(else (let ((e-0 (- arg-0 1))) (+ 1 e-0)))))))
(define PreludeC-45Types-mult (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 0)(else (let ((e-0 (- arg-0 1))) (+ arg-1 (* e-0 arg-1))))))))
(define PreludeC-45TypesC-45Strings-length (lambda (arg-0) (PreludeC-45Types-fromInteger_Num__Nat (string-length arg-0))))
(define PreludeC-45TypesC-45List-length (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) 0) (else (let ((e-3 (vector-ref sc0 2))) (+ 1 (PreludeC-45TypesC-45List-length 'erased e-3))))))))
(define PreludeC-45Types-isSpace (lambda (arg-0) (PreludeC-45Basics-C-124C-124 (PreludeC-45EqOrd-C-61C-61_Eq__Char arg-0 #\ ) (lambda () (PreludeC-45Basics-C-124C-124 (PreludeC-45EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 9)) (lambda () (PreludeC-45Basics-C-124C-124 (PreludeC-45EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 13)) (lambda () (PreludeC-45Basics-C-124C-124 (PreludeC-45EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 10)) (lambda () (PreludeC-45Basics-C-124C-124 (PreludeC-45EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 12)) (lambda () (PreludeC-45Basics-C-124C-124 (PreludeC-45EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 11)) (lambda () (PreludeC-45EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 160))))))))))))))))
(define PreludeC-45Types-isDigit (lambda (arg-0) (PreludeC-45Basics-C-38C-38 (PreludeC-45EqOrd-C-62C-61_Ord__Char arg-0 #\0) (lambda () (PreludeC-45EqOrd-C-60C-61_Ord__Char arg-0 #\9)))))
(define PreludeC-45Types-integerToNat (lambda (arg-0) (PreludeC-45Types-case--integerToNat-628 arg-0 (let ((sc0 (or (and (<= arg-0 0) 1) 0))) (cond ((equal? sc0 0) 1)(else 0))))))
(define PreludeC-45Types-elem (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) 1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (PreludeC-45Basics-C-124C-124 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) ((e-1 arg-2) e-2))) (lambda () (PreludeC-45Types-elem 'erased arg-1 arg-2 e-3))))))))))
(define PreludeC-45Types-either (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) ((arg-3) e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((arg-4) e-5)))))))
(define PreludeC-45TypesC-45Strings-C-43C-43 (lambda (arg-0 arg-1) (string-append arg-0 arg-1)))
(define PreludeC-45TypesC-45List-C-43C-43 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) arg-2) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 e-2 (PreludeC-45TypesC-45List-C-43C-43 'erased e-3 arg-2)))))))))
(define PreludeC-45Num-fromInteger_Num__Integer (lambda (ext-0) ext-0))
(define PreludeC-45Num-fromInteger_Num__Int (lambda (ext-0) ext-0))
(define PreludeC-45Num-C-45_Neg__Int (lambda (ext-0 ext-1) (b- ext-0 ext-1 63)))
(define PreludeC-45Num-C-43_Num__Integer (lambda (ext-0 ext-1) (+ ext-0 ext-1)))
(define PreludeC-45Num-C-43_Num__Int (lambda (ext-0 ext-1) (b+ ext-0 ext-1 63)))
(define PreludeC-45Num-fromInteger (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-2) (e-3 arg-2))))))
(define PreludeC-45EqOrd-case--caseC-32blockC-32inC-32compare-1301 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 1) (else 2)))))
(define PreludeC-45EqOrd-case--compare-1284 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 0) (else (PreludeC-45EqOrd-case--caseC-32blockC-32inC-32compare-1301 arg-0 arg-1 (PreludeC-45EqOrd-C-61C-61_Eq__Integer arg-1 arg-0)))))))
(define PreludeC-45EqOrd-case--max-1267 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45EqOrd-case--min-1253 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45EqOrd-min_Ord__Integer (lambda (arg-0 arg-1) (PreludeC-45EqOrd-case--min-1253 arg-1 arg-0 (PreludeC-45EqOrd-C-60_Ord__Integer arg-0 arg-1))))
(define PreludeC-45EqOrd-max_Ord__Integer (lambda (arg-0 arg-1) (PreludeC-45EqOrd-case--max-1267 arg-1 arg-0 (PreludeC-45EqOrd-C-62_Ord__Integer arg-0 arg-1))))
(define PreludeC-45EqOrd-compare_Ord__Integer (lambda (arg-0 arg-1) (PreludeC-45EqOrd-case--compare-1284 arg-1 arg-0 (PreludeC-45EqOrd-C-60_Ord__Integer arg-0 arg-1))))
(define PreludeC-45EqOrd-__Impl_Ord_Integer (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__Integer arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq__Integer arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (PreludeC-45EqOrd-compare_Ord__Integer arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (PreludeC-45EqOrd-C-60_Ord__Integer arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (PreludeC-45EqOrd-C-62_Ord__Integer arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (PreludeC-45EqOrd-C-60C-61_Ord__Integer arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (PreludeC-45EqOrd-C-62C-61_Ord__Integer arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (PreludeC-45EqOrd-max_Ord__Integer arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (PreludeC-45EqOrd-min_Ord__Integer arg-381 arg-382))))))
(define PreludeC-45EqOrd-__Impl_Eq_String (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq__String arg-4 arg-5))))))
(define PreludeC-45EqOrd-__Impl_Eq_Ordering (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__Ordering arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq__Ordering arg-4 arg-5))))))
(define PreludeC-45EqOrd-__Impl_Eq_Integer (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__Integer arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq__Integer arg-4 arg-5))))))
(define PreludeC-45EqOrd-__Impl_Eq_Int (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__Int arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq__Int arg-4 arg-5))))))
(define PreludeC-45EqOrd-__Impl_Eq_Char (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq__Char arg-4 arg-5))))))
(define PreludeC-45EqOrd-C-62_Ord__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (> arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-62_Ord__Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-62C-61_Ord__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (>= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-62C-61_Ord__Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-61C-61_Eq__String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-61C-61_Eq__Ordering (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 0)(else 1)))) ((equal? sc0 1) (let ((sc1 arg-1)) (cond ((equal? sc1 1) 0)(else 1)))) ((equal? sc0 2) (let ((sc1 arg-1)) (cond ((equal? sc1 2) 0)(else 1))))(else 1)))))
(define PreludeC-45EqOrd-C-61C-61_Eq__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-61C-61_Eq__Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-61C-61_Eq__Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-60_Ord__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-60_Ord__Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-60C-61_Ord__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (<= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-60C-61_Ord__Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (<= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-60C-61_Ord__Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char<=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define PreludeC-45EqOrd-C-47C-61_Eq__String (lambda (arg-0 arg-1) (PreludeC-45Basics-not (PreludeC-45EqOrd-C-61C-61_Eq__String arg-0 arg-1))))
(define PreludeC-45EqOrd-C-47C-61_Eq__Ordering (lambda (arg-0 arg-1) (PreludeC-45Basics-not (PreludeC-45EqOrd-C-61C-61_Eq__Ordering arg-0 arg-1))))
(define PreludeC-45EqOrd-C-47C-61_Eq__Integer (lambda (arg-0 arg-1) (PreludeC-45Basics-not (PreludeC-45EqOrd-C-61C-61_Eq__Integer arg-0 arg-1))))
(define PreludeC-45EqOrd-C-47C-61_Eq__Int (lambda (arg-0 arg-1) (PreludeC-45Basics-not (PreludeC-45EqOrd-C-61C-61_Eq__Int arg-0 arg-1))))
(define PreludeC-45EqOrd-C-47C-61_Eq__Char (lambda (arg-0 arg-1) (PreludeC-45Basics-not (PreludeC-45EqOrd-C-61C-61_Eq__Char arg-0 arg-1))))
(define PreludeC-45EqOrd-compare (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-2) (lambda (arg-3) ((e-2 arg-2) arg-3)))))))
(define PreludeC-45EqOrd-C-62 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-4 (vector-ref sc0 4))) (lambda (arg-2) (lambda (arg-3) ((e-4 arg-2) arg-3)))))))
(define PreludeC-45EqOrd-C-61C-61 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3)))))))
(define PreludeC-45EqOrd-C-60 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-2) (lambda (arg-3) ((e-3 arg-2) arg-3)))))))
(define PreludeC-45EqOrd-C-47C-61 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-2) (lambda (arg-3) ((e-2 arg-2) arg-3)))))))
(define PreludeC-45Interfaces-__Monoid_C-40SemigroupC-32tyC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define PreludeC-45Interfaces-__Monad_C-40ApplicativeC-32mC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define PreludeC-45Interfaces-__Applicative_C-40FunctorC-32fC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define PreludeC-45Interfaces-traverse (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-6) (lambda (arg-7) ((((((e-3 'erased) 'erased) 'erased) arg-4) arg-6) arg-7)))))))
(define PreludeC-45Interfaces-pure (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) ((e-2 'erased) arg-3))))))
(define PreludeC-45Interfaces-neutral (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) e-2))))
(define PreludeC-45Interfaces-map (lambda (arg-0 arg-1 arg-2 arg-3 ext-0 ext-1) ((((arg-3 'erased) 'erased) ext-0) ext-1)))
(define PreludeC-45Interfaces-ignore (lambda (arg-0 arg-1 arg-2 ext-0) ((((arg-2 'erased) 'erased) (lambda (eta-0) (vector 0 ))) ext-0)))
(define PreludeC-45Interfaces-foldr (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (((((e-1 'erased) 'erased) arg-4) arg-5) arg-6))))))))
(define PreludeC-45Interfaces-foldl (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (((((e-2 'erased) 'erased) arg-4) arg-5) arg-6))))))))
(define PreludeC-45Interfaces-concatMap (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 (Builtin-fst 'erased 'erased arg-3))) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-5) (((((e-1 'erased) 'erased) (lambda (eta-0) (lambda (arg-6) (let ((sc1 (Builtin-snd 'erased 'erased arg-3))) (let ((e-4 (vector-ref sc1 1))) ((e-4 (arg-4 eta-0)) arg-6)))))) (let ((sc1 (Builtin-snd 'erased 'erased arg-3))) (let ((e-3 (vector-ref sc1 2))) e-3))) arg-5))))))
(define PreludeC-45Interfaces-concat (lambda (arg-0 arg-1 arg-2) (let ((sc0 (Builtin-fst 'erased 'erased arg-2))) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-3) (((((e-1 'erased) 'erased) (lambda (arg-4) (lambda (arg-5) (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-4 (vector-ref sc1 1))) ((e-4 arg-4) arg-5)))))) (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-3 (vector-ref sc1 2))) e-3))) arg-3))))))
(define PreludeC-45Interfaces-C-62C-62C-61 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-4) (lambda (arg-5) ((((e-2 'erased) 'erased) arg-4) arg-5)))))))
(define PreludeC-45Interfaces-C-60C-124C-62 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-3) (lambda (arg-4) (((e-3 'erased) arg-3) arg-4)))))))
(define PreludeC-45Interfaces-C-60C-43C-62 (lambda (arg-0 arg-1 ext-0 ext-1) ((arg-1 ext-0) ext-1)))
(define PreludeC-45Interfaces-C-60C-42C-62 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-4) (lambda (arg-5) ((((e-3 'erased) 'erased) arg-4) arg-5)))))))
(define PreludeC-45Interfaces-C-60C-36C-62 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) ((((arg-3 'erased) 'erased) arg-4) arg-5)))
(define PrimIO-case--unsafePerformIO-519 (lambda (arg-0 arg-1 arg-2 arg-3) (PrimIO-unsafeDestroyWorld 'erased 'erased arg-3)))
(define PrimIO-case--caseC-32blockC-32inC-32io_bind-440 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (arg-7 arg-6)))
(define PrimIO-case--io_bind-418 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (PrimIO-case--caseC-32blockC-32inC-32io_bind-440 'erased 'erased 'erased 'erased 'erased arg-5 'erased (arg-3 arg-5))))
(define PrimIO-unsafePerformIO (lambda (arg-0 arg-1) (PrimIO-unsafeCreateWorld 'erased (lambda (w) (PrimIO-case--unsafePerformIO-519 'erased 'erased 'erased (arg-1 w))))))
(define PrimIO-unsafeDestroyWorld (lambda (arg-0 arg-1 arg-2) arg-2))
(define PrimIO-unsafeCreateWorld (lambda (arg-0 arg-1) (arg-1 #f)))
(define PrimIO-prim__nullPtr (lambda (arg-0 arg-1) (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr 'erased arg-1))))
(define PrimIO-prim__forgetPtr (lambda (arg-0 ext-0) (Builtin-believe_me 'erased 'erased ext-0)))
(define PrimIO-io_pure (lambda (arg-0 arg-1 ext-0) arg-1))
(define PrimIO-io_bind (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (PrimIO-case--io_bind-418 'erased 'erased 'erased arg-3 'erased (arg-2 ext-0))))
(define PrimIO-fromPrim (lambda (arg-0 arg-1) arg-1))
(define PreludeC-45Show-case--caseC-32blockC-32inC-32showLitChar-6485 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (lambda (eta-0) (PreludeC-45Types-strCons #\\ (PreludeC-45Show-protectEsc (lambda (eta-1) (PreludeC-45Types-isDigit eta-1)) (PreludeC-45Show-show_Show__Int (char->integer arg-0)) eta-0)))) (else (lambda (eta-0) (PreludeC-45Types-strCons arg-0 eta-0)))))))
(define PreludeC-45Show-case--showLitChar-6462 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (PreludeC-45Types-strCons #\\ (PreludeC-45TypesC-45Strings-C-43C-43 e-1 eta-0))))) (else (PreludeC-45Show-case--caseC-32blockC-32inC-32showLitChar-6485 arg-0 (PreludeC-45EqOrd-C-62_Ord__Char arg-0 (integer->char 127))))))))
(define PreludeC-45Show-case--protectEsc-6209 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) "\\&") (else "")))))
(define PreludeC-45Show-case--max-5951 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45Show-case--min-5937 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define PreludeC-45Show-n--1659-6279-getAt (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (let ((sc1 arg-2)) (case (vector-ref sc1 0) ((1) (let ((e-3 (vector-ref sc1 1))) (vector 1 e-3)))(else (let ((sc1 arg-2)) (vector 0 ))))))(else (let ((e-1 (- arg-1 1))) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((1) (let ((e-7 (vector-ref sc0 2))) (PreludeC-45Show-n--1659-6279-getAt arg-0 e-1 e-7)))(else (let ((sc0 arg-2)) (vector 0 )))))))))))
(define PreludeC-45Show-n--1659-6278-asciiTab (lambda (arg-0) (vector 1 "NUL" (vector 1 "SOH" (vector 1 "STX" (vector 1 "ETX" (vector 1 "EOT" (vector 1 "ENQ" (vector 1 "ACK" (vector 1 "BEL" (vector 1 "BS" (vector 1 "HT" (vector 1 "LF" (vector 1 "VT" (vector 1 "FF" (vector 1 "CR" (vector 1 "SO" (vector 1 "SI" (vector 1 "DLE" (vector 1 "DC1" (vector 1 "DC2" (vector 1 "DC3" (vector 1 "DC4" (vector 1 "NAK" (vector 1 "SYN" (vector 1 "ETB" (vector 1 "CAN" (vector 1 "EM" (vector 1 "SUB" (vector 1 "ESC" (vector 1 "FS" (vector 1 "GS" (vector 1 "RS" (vector 1 "US" (vector 0 )))))))))))))))))))))))))))))))))))
(define PreludeC-45Show-show_Show__String (lambda (arg-0) (PreludeC-45Types-strCons #\" ((PreludeC-45Show-showLitString (PreludeC-45Types-unpack arg-0)) "\""))))
(define PreludeC-45Show-show_Show__Int (lambda (arg-0) (PreludeC-45Show-showPrec_Show__Int (vector 0 ) arg-0)))
(define PreludeC-45Show-show_Show__Char (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 #\') "'\\''")(else (PreludeC-45Types-strCons #\' ((PreludeC-45Show-showLitChar arg-0) "'")))))))
(define PreludeC-45Show-showPrec_Show__String (lambda (arg-0 arg-1) (PreludeC-45Show-show_Show__String arg-1)))
(define PreludeC-45Show-showPrec_Show__Int (lambda (ext-0 ext-1) (PreludeC-45Show-primNumShow 'erased (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define PreludeC-45Show-min_Ord__Prec (lambda (arg-0 arg-1) (PreludeC-45Show-case--min-5937 arg-1 arg-0 (PreludeC-45Show-C-60_Ord__Prec arg-0 arg-1))))
(define PreludeC-45Show-max_Ord__Prec (lambda (arg-0 arg-1) (PreludeC-45Show-case--max-5951 arg-1 arg-0 (PreludeC-45Show-C-62_Ord__Prec arg-0 arg-1))))
(define PreludeC-45Show-compare_Ord__Prec (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((4) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((4) (let ((e-1 (vector-ref sc1 1))) (PreludeC-45Types-compare_Ord__Nat e-0 e-1)))(else (PreludeC-45EqOrd-compare_Ord__Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1)))))))(else (PreludeC-45EqOrd-compare_Ord__Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1)))))))
(define PreludeC-45Show-__Impl_Show_String (lambda () (vector 0 (lambda (x) (PreludeC-45Show-show_Show__String x)) (lambda (d) (lambda (x) (PreludeC-45Show-showPrec_Show__String d x))))))
(define PreludeC-45Show-__Impl_Show_Int (lambda () (vector 0 (lambda (x) (PreludeC-45Show-show_Show__Int x)) (lambda (d) (lambda (x) (PreludeC-45Show-showPrec_Show__Int d x))))))
(define PreludeC-45Show-__Impl_Ord_Prec (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Show-C-61C-61_Eq__Prec arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45Show-C-47C-61_Eq__Prec arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (PreludeC-45Show-compare_Ord__Prec arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (PreludeC-45Show-C-60_Ord__Prec arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (PreludeC-45Show-C-62_Ord__Prec arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (PreludeC-45Show-C-60C-61_Ord__Prec arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (PreludeC-45Show-C-62C-61_Ord__Prec arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (PreludeC-45Show-max_Ord__Prec arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (PreludeC-45Show-min_Ord__Prec arg-381 arg-382))))))
(define PreludeC-45Show-__Impl_Eq_Prec (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45Show-C-61C-61_Eq__Prec arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45Show-C-47C-61_Eq__Prec arg-4 arg-5))))))
(define PreludeC-45Show-C-62_Ord__Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-61C-61_Eq__Ordering (PreludeC-45Show-compare_Ord__Prec arg-0 arg-1) 2)))
(define PreludeC-45Show-C-62C-61_Ord__Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-47C-61_Eq__Ordering (PreludeC-45Show-compare_Ord__Prec arg-0 arg-1) 0)))
(define PreludeC-45Show-C-61C-61_Eq__Prec (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((4) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((4) (let ((e-1 (vector-ref sc1 1))) (PreludeC-45Types-C-61C-61_Eq__Nat e-0 e-1)))(else (PreludeC-45EqOrd-C-61C-61_Eq__Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1)))))))(else (PreludeC-45EqOrd-C-61C-61_Eq__Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1)))))))
(define PreludeC-45Show-C-60_Ord__Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-61C-61_Eq__Ordering (PreludeC-45Show-compare_Ord__Prec arg-0 arg-1) 0)))
(define PreludeC-45Show-C-60C-61_Ord__Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-C-47C-61_Eq__Ordering (PreludeC-45Show-compare_Ord__Prec arg-0 arg-1) 2)))
(define PreludeC-45Show-C-47C-61_Eq__Prec (lambda (arg-0 arg-1) (PreludeC-45Basics-not (PreludeC-45Show-C-61C-61_Eq__Prec arg-0 arg-1))))
(define PreludeC-45Show-showPrec (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-2) (lambda (arg-3) ((e-2 arg-2) arg-3)))))))
(define PreludeC-45Show-showParens (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 1) arg-1) (else (PreludeC-45TypesC-45Strings-C-43C-43 "(" (PreludeC-45TypesC-45Strings-C-43C-43 arg-1 ")")))))))
(define PreludeC-45Show-showLitString (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) eta-0)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (cond ((equal? sc1 #\") (lambda (eta-0) (PreludeC-45TypesC-45Strings-C-43C-43 "\\\"" ((PreludeC-45Show-showLitString e-3) eta-0))))(else (lambda (eta-0) ((PreludeC-45Show-showLitChar e-2) ((PreludeC-45Show-showLitString e-3) eta-0)))))))))))))
(define PreludeC-45Show-showLitChar (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 (integer->char 7)) (lambda (arg-1) (PreludeC-45TypesC-45Strings-C-43C-43 "\\a" arg-1))) ((equal? sc0 (integer->char 8)) (lambda (arg-1) (PreludeC-45TypesC-45Strings-C-43C-43 "\\b" arg-1))) ((equal? sc0 (integer->char 12)) (lambda (arg-1) (PreludeC-45TypesC-45Strings-C-43C-43 "\\f" arg-1))) ((equal? sc0 (integer->char 10)) (lambda (arg-1) (PreludeC-45TypesC-45Strings-C-43C-43 "\\n" arg-1))) ((equal? sc0 (integer->char 13)) (lambda (arg-1) (PreludeC-45TypesC-45Strings-C-43C-43 "\\r" arg-1))) ((equal? sc0 (integer->char 9)) (lambda (arg-1) (PreludeC-45TypesC-45Strings-C-43C-43 "\\t" arg-1))) ((equal? sc0 (integer->char 11)) (lambda (arg-1) (PreludeC-45TypesC-45Strings-C-43C-43 "\\v" arg-1))) ((equal? sc0 (integer->char 14)) (lambda (eta-0) (PreludeC-45Show-protectEsc (lambda (arg-1) (PreludeC-45EqOrd-C-61C-61_Eq__Char arg-1 #\H)) "\\SO" eta-0))) ((equal? sc0 (integer->char 127)) (lambda (arg-1) (PreludeC-45TypesC-45Strings-C-43C-43 "\\DEL" arg-1))) ((equal? sc0 #\\) (lambda (arg-1) (PreludeC-45TypesC-45Strings-C-43C-43 "\\\\" arg-1)))(else (PreludeC-45Show-case--showLitChar-6462 arg-0 (PreludeC-45Show-n--1659-6279-getAt arg-0 (PreludeC-45Types-fromInteger_Num__Nat (char->integer arg-0)) (PreludeC-45Show-n--1659-6278-asciiTab arg-0))))))))
(define PreludeC-45Show-show (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (e-1 arg-2))))))
(define PreludeC-45Show-protectEsc (lambda (arg-0 arg-1 arg-2) (PreludeC-45TypesC-45Strings-C-43C-43 arg-1 (PreludeC-45TypesC-45Strings-C-43C-43 (PreludeC-45Show-case--protectEsc-6209 arg-2 arg-1 arg-0 (PreludeC-45Show-firstCharIs arg-0 arg-2)) arg-2))))
(define PreludeC-45Show-primNumShow (lambda (arg-0 arg-1 arg-2 arg-3) (let ((str (arg-1 arg-3))) (PreludeC-45Show-showParens (PreludeC-45Basics-C-38C-38 (PreludeC-45Show-C-62C-61_Ord__Prec arg-2 (vector 5 )) (lambda () (PreludeC-45Show-firstCharIs (lambda (arg-4) (PreludeC-45EqOrd-C-61C-61_Eq__Char arg-4 #\-)) str))) str))))
(define PreludeC-45Show-precCon (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) 0) ((1) 1) ((2) 2) ((3) 3) ((4) 4) ((5) 5) (else 6)))))
(define PreludeC-45Show-firstCharIs (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 "") 1)(else (arg-0 (string-ref arg-1 0)))))))
(define PreludeC-45IO-pure_Applicative__IO (lambda (arg-0 arg-1 ext-0) arg-1))
(define PreludeC-45IO-map_Functor__IO (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-3 (arg-3 ext-0))) (arg-2 act-3))))
(define PreludeC-45IO-liftIO_HasIO__IO (lambda (arg-0 arg-1) arg-1))
(define PreludeC-45IO-join_Monad__IO (lambda (arg-0 arg-1 ext-0) (let ((act-2 (arg-1 ext-0))) (act-2 ext-0))))
(define PreludeC-45IO-__Impl_Monad_IO (lambda () (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-29 (arg-647 eta-0))) (act-29 eta-0))))))))
(define PreludeC-45IO-__Impl_HasIO_IO (lambda () (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (let ((act-24 (arg-644 eta-0))) ((arg-645 act-24) eta-0))))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (let ((act-51 (arg-647 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-7067) arg-7067)))))
(define PreludeC-45IO-__Impl_Functor_IO (lambda (ext-4 ext-1 ext-2 ext-3 ext-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased ext-2 ext-3 ext-0)))
(define PreludeC-45IO-__Impl_Applicative_IO (lambda () (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (PreludeC-45IO-map_Functor__IO 'erased 'erased func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (let ((act-17 (arg-483 eta-0))) (let ((act-16 (arg-485 eta-0))) (act-17 act-16)))))))))))
(define PreludeC-45IO-__HasIO_C-40MonadC-32ioC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define PreludeC-45IO-C-62C-62C-61_Monad__IO (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-1 (arg-2 ext-0))) ((arg-3 act-1) ext-0))))
(define PreludeC-45IO-C-60C-42C-62_Applicative__IO (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-6 (arg-2 ext-0))) (let ((act-5 (arg-3 ext-0))) (act-6 act-5)))))
(define PreludeC-45IO-putStrLn (lambda (arg-0 arg-1 arg-2) (PreludeC-45IO-putStr 'erased arg-1 (string-append arg-2 "\xa;"))))
(define PreludeC-45IO-putStr (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (PreludeC-45IO-prim__putStr arg-2 eta-0)))))))
(define PreludeC-45IO-print (lambda (arg-0 arg-1 arg-2 arg-3) (PreludeC-45IO-putStr 'erased (Builtin-fst 'erased 'erased arg-2) (let ((sc0 (Builtin-snd 'erased 'erased arg-2))) (let ((e-1 (vector-ref sc0 1))) (e-1 arg-3))))))
(define PreludeC-45IO-primIO (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) arg-3)))))
(define PreludeC-45IO-liftIO (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) ((e-2 'erased) arg-3))))))
(define DataC-45StringC-45Parser-case--caseC-32blockC-32inC-32string-8062 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (cond ((equal? sc0 0) (vector 1 arg-2 (vector 0 (let ((sc1 arg-3)) (let ((e-0 (vector-ref sc1 1))) e-0)) (b+ (let ((sc1 arg-3)) (let ((e-1 (vector-ref sc1 2))) e-1)) arg-4 63) (let ((sc1 arg-3)) (let ((e-2 (vector-ref sc1 3))) e-2))))) (else (vector 0 (let ((sc1 arg-3)) (let ((e-1 (vector-ref sc1 2))) e-1)) (PreludeC-45TypesC-45Strings-C-43C-43 "string " (PreludeC-45Show-show_Show__String arg-2))))))))
(define DataC-45StringC-45Parser-case--string-8042 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (let ((head (DataC-45Strings-strSubstr (let ((sc1 arg-3)) (let ((e-1 (vector-ref sc1 2))) e-1)) arg-4 (let ((sc1 arg-3)) (let ((e-0 (vector-ref sc1 1))) e-0))))) (DataC-45StringC-45Parser-case--caseC-32blockC-32inC-32string-8062 'erased arg-1 arg-2 arg-3 arg-4 head (PreludeC-45EqOrd-C-61C-61_Eq__String head arg-2)))) (else (vector 0 (let ((sc1 arg-3)) (let ((e-1 (vector-ref sc1 2))) e-1)) (PreludeC-45TypesC-45Strings-C-43C-43 "string " (PreludeC-45Show-show_Show__String arg-2))))))))
(define DataC-45StringC-45Parser-case--caseC-32blockC-32inC-32satisfy-7964 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (vector 1 arg-4 (vector 0 (let ((sc1 arg-3)) (let ((e-0 (vector-ref sc1 1))) e-0)) (b+ (let ((sc1 arg-3)) (let ((e-1 (vector-ref sc1 2))) e-1)) 1 63) (let ((sc1 arg-3)) (let ((e-2 (vector-ref sc1 3))) e-2))))) (else (vector 0 (let ((sc1 arg-3)) (let ((e-1 (vector-ref sc1 2))) e-1)) "satisfy"))))))
(define DataC-45StringC-45Parser-case--satisfy-7948 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (let ((ch (DataC-45Strings-strIndex (let ((sc1 arg-3)) (let ((e-0 (vector-ref sc1 1))) e-0)) (let ((sc1 arg-3)) (let ((e-1 (vector-ref sc1 2))) e-1))))) (DataC-45StringC-45Parser-case--caseC-32blockC-32inC-32satisfy-7964 'erased arg-1 arg-2 arg-3 ch (arg-2 ch)))) (else (vector 0 (let ((sc1 arg-3)) (let ((e-1 (vector-ref sc1 2))) e-1)) "satisfy"))))))
(define DataC-45StringC-45Parser-case--C-60C-63C-62-7639 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (vector 1 e-1 e-2)))) (else (let ((e-4 (vector-ref sc0 1))) (vector 0 e-4 arg-3)))))))
(define DataC-45StringC-45Parser-case--parseT-7545 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (vector 1 (vector 0 e-1 (let ((sc1 e-2)) (let ((e-4 (vector-ref sc1 2))) e-4))))))) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 0 (DataC-45Strings-fastAppend (vector 1 "Parse failed at position " (vector 1 (PreludeC-45Show-show_Show__Int e-4) (vector 1 ": " (vector 1 e-5 (vector 0 ))))))))))))))
(define DataC-45StringC-45Parser-case--C-62C-62C-61-7409 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) ((arg-4 e-1) e-2)))) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((sc1 (let ((sc2 arg-3)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 e-4 e-5)))))))))))
(define DataC-45StringC-45Parser-case--C-60C-124C-62-7268 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 (let ((sc2 arg-2)) (let ((e-5 (vector-ref sc2 1))) e-5)))) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (vector 1 e-1 e-2))))))) (else (arg-3 arg-5))))))
(define DataC-45StringC-45Parser-case--C-60C-42C-62-7121 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 (let ((sc2 arg-3)) (let ((e-5 (vector-ref sc2 1))) e-5)))) (let ((e-5 (vector-ref sc1 1))) ((((e-5 'erased) 'erased) (lambda (eta-0) (DataC-45StringC-45Parser-map_Functor__Result 'erased 'erased e-1 eta-0))) (arg-4 e-2))))))) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((sc1 (let ((sc2 arg-3)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 e-4 e-5)))))))))))
(define DataC-45StringC-45ParserC-45ParseT-rf--runParser (lambda (arg-0 arg-1 arg-2) arg-2))
(define DataC-45StringC-45ParserC-45State-rf--pos (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-1 (vector-ref sc0 2))) e-1))))
(define DataC-45StringC-45ParserC-45State-rf--maxPos (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-2 (vector-ref sc0 3))) e-2))))
(define DataC-45StringC-45ParserC-45State-rf--input (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-0 (vector-ref sc0 1))) e-0))))
(define DataC-45StringC-45Parser-pure_Applicative__C-40ParseTC-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((sc0 (let ((sc1 arg-2)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (vector 1 arg-3 ext-0))))))
(define DataC-45StringC-45Parser-map_Functor__Result (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (vector 0 e-1 e-2)))) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 1 (arg-2 e-4) e-5))))))))
(define DataC-45StringC-45Parser-map_Functor__C-40ParseTC-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) ((((arg-3 'erased) 'erased) (lambda (eta-0) (DataC-45StringC-45Parser-map_Functor__Result 'erased 'erased arg-4 eta-0))) (arg-5 ext-0))))
(define DataC-45StringC-45Parser-join_Monad__C-40ParseTC-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (DataC-45StringC-45Parser-C-62C-62C-61_Monad__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased arg-2 arg-3 (lambda (eta-0) eta-0) ext-0)))
(define DataC-45StringC-45Parser-empty_Alternative__C-40ParseTC-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 ext-0) (let ((sc0 (let ((sc1 arg-2)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (vector 0 (let ((sc1 ext-0)) (let ((e-5 (vector-ref sc1 2))) e-5)) "no alternative left"))))))
(define DataC-45StringC-45Parser-__Impl_Monad_C-40ParseTC-32C-36mC-41 (lambda (arg-0 arg-1) (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (DataC-45StringC-45Parser-map_Functor__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) (DataC-45StringC-45Parser-pure_Applicative__C-40ParseTC-32C-36mC-41 'erased 'erased arg-1 arg-482 eta-0)))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (DataC-45StringC-45Parser-C-60C-42C-62_Applicative__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased arg-1 arg-483 arg-485 eta-0))))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (lambda (eta-0) (DataC-45StringC-45Parser-C-62C-62C-61_Monad__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased arg-1 arg-644 arg-645 eta-0)))))) (lambda (a) (lambda (arg-647) (lambda (eta-0) (DataC-45StringC-45Parser-join_Monad__C-40ParseTC-32C-36mC-41 'erased 'erased arg-1 arg-647 eta-0)))))))
(define DataC-45StringC-45Parser-__Impl_Functor_Result (lambda (ext-0 ext-1 ext-2 ext-3) (DataC-45StringC-45Parser-map_Functor__Result 'erased 'erased ext-2 ext-3)))
(define DataC-45StringC-45Parser-__Impl_Functor_C-40ParseTC-32C-36mC-41 (lambda (arg-0 arg-1 ext-4 ext-1 ext-2 ext-3 ext-0) (DataC-45StringC-45Parser-map_Functor__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased arg-1 ext-2 ext-3 ext-0)))
(define DataC-45StringC-45Parser-__Impl_Applicative_C-40ParseTC-32C-36mC-41 (lambda (arg-0 arg-1) (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (DataC-45StringC-45Parser-map_Functor__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) (DataC-45StringC-45Parser-pure_Applicative__C-40ParseTC-32C-36mC-41 'erased 'erased arg-1 arg-482 eta-0)))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (DataC-45StringC-45Parser-C-60C-42C-62_Applicative__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased arg-1 arg-483 arg-485 eta-0)))))))))
(define DataC-45StringC-45Parser-__Impl_Alternative_C-40ParseTC-32C-36mC-41 (lambda (arg-0 arg-1) (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (DataC-45StringC-45Parser-map_Functor__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) func arg-149 eta-0)))))) (lambda (a) (lambda (arg-482) (lambda (eta-0) (DataC-45StringC-45Parser-pure_Applicative__C-40ParseTC-32C-36mC-41 'erased 'erased arg-1 arg-482 eta-0)))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (lambda (eta-0) (DataC-45StringC-45Parser-C-60C-42C-62_Applicative__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased arg-1 arg-483 arg-485 eta-0))))))) (lambda (a) (lambda (eta-0) (DataC-45StringC-45Parser-empty_Alternative__C-40ParseTC-32C-36mC-41 'erased 'erased arg-1 eta-0))) (lambda (a) (lambda (arg-595) (lambda (arg-596) (lambda (eta-0) (DataC-45StringC-45Parser-C-60C-124C-62_Alternative__C-40ParseTC-32C-36mC-41 'erased 'erased arg-1 arg-595 arg-596 eta-0))))))))
(define DataC-45StringC-45Parser-C-62C-62C-61_Monad__C-40ParseTC-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (arg-4 ext-0)) (lambda (bind-0) (let ((sc1 bind-0)) (case (vector-ref sc1 0) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) ((arg-5 e-5) e-4)))) (else (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (let ((sc2 (let ((sc3 arg-3)) (let ((e-8 (vector-ref sc3 1))) e-8)))) (let ((e-7 (vector-ref sc2 2))) ((e-7 'erased) (vector 0 e-4 e-5)))))))))))))))
(define DataC-45StringC-45Parser-C-60C-124C-62_Alternative__C-40ParseTC-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (arg-3 ext-0)) (lambda (bind-0) (let ((sc1 bind-0)) (case (vector-ref sc1 0) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((sc2 (let ((sc3 arg-2)) (let ((e-8 (vector-ref sc3 1))) e-8)))) (let ((e-7 (vector-ref sc2 2))) ((e-7 'erased) (vector 1 e-5 e-4))))))) (else (arg-4 ext-0))))))))))
(define DataC-45StringC-45Parser-C-60C-42C-62_Applicative__C-40ParseTC-32C-36mC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (arg-4 ext-0)) (lambda (bind-0) (let ((sc1 bind-0)) (case (vector-ref sc1 0) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((sc2 (let ((sc3 arg-3)) (let ((e-8 (vector-ref sc3 1))) e-8)))) (let ((e-8 (vector-ref sc2 1))) ((((e-8 'erased) 'erased) (lambda (eta-0) (DataC-45StringC-45Parser-map_Functor__Result 'erased 'erased e-5 eta-0))) (arg-5 e-4))))))) (else (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (let ((sc2 (let ((sc3 arg-3)) (let ((e-8 (vector-ref sc3 1))) e-8)))) (let ((e-7 (vector-ref sc2 2))) ((e-7 'erased) (vector 0 e-4 e-5)))))))))))))))
(define DataC-45StringC-45Parser-takeWhile1 (lambda (arg-0 arg-1 arg-2) (PreludeC-45Interfaces-C-60C-36C-62 'erased 'erased 'erased (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (DataC-45StringC-45Parser-map_Functor__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) func arg-149 eta-0)))))) (lambda (eta-0) (PreludeC-45Types-pack eta-0)) (lambda (eta-0) (DataC-45StringC-45Parser-some 'erased 'erased arg-1 (lambda (eta-1) (DataC-45StringC-45Parser-satisfy 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1)) arg-2 eta-1)) eta-0)))))
(define DataC-45StringC-45Parser-takeWhile (lambda (arg-0 arg-1 arg-2) (PreludeC-45Interfaces-C-60C-36C-62 'erased 'erased 'erased (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (DataC-45StringC-45Parser-map_Functor__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) func arg-149 eta-0)))))) (lambda (eta-0) (PreludeC-45Types-pack eta-0)) (lambda (eta-0) (DataC-45StringC-45Parser-many 'erased 'erased arg-1 (lambda (eta-1) (DataC-45StringC-45Parser-satisfy 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1)) arg-2 eta-1)) eta-0)))))
(define DataC-45StringC-45Parser-string (lambda (arg-0 arg-1 arg-2 ext-0) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (let ((len (DataC-45Strings-strLength arg-2))) (DataC-45StringC-45Parser-case--string-8042 'erased arg-1 arg-2 ext-0 len (PreludeC-45EqOrd-C-60C-61_Ord__Int (b+ (let ((sc1 ext-0)) (let ((e-5 (vector-ref sc1 2))) e-5)) len 63) (let ((sc1 ext-0)) (let ((e-4 (vector-ref sc1 3))) e-4))))))))))
(define DataC-45StringC-45Parser-spaces1 (lambda (arg-0 arg-1 ext-0) (DataC-45StringC-45Parser-C-60C-63C-62 'erased 'erased (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) (DataC-45StringC-45Parser-skip 'erased 'erased (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) (lambda (eta-0) (DataC-45StringC-45Parser-some 'erased 'erased arg-1 (lambda (eta-1) (DataC-45StringC-45Parser-space 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1)) eta-1)) eta-0))) "whitespaces" ext-0)))
(define DataC-45StringC-45Parser-spaces (lambda (arg-0 arg-1) (DataC-45StringC-45Parser-skip 'erased 'erased (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-1 (vector-ref sc0 1))) e-1)) (lambda (eta-0) (DataC-45StringC-45Parser-many 'erased 'erased arg-1 (lambda (eta-1) (DataC-45StringC-45Parser-space 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1)) eta-1)) eta-0)))))
(define DataC-45StringC-45Parser-space (lambda (arg-0 arg-1 ext-0) (DataC-45StringC-45Parser-C-60C-63C-62 'erased 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1)) (lambda (eta-0) (DataC-45StringC-45Parser-satisfy 'erased arg-1 (lambda (eta-1) (PreludeC-45Types-isSpace eta-1)) eta-0)) "space" ext-0)))
(define DataC-45StringC-45Parser-some (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (DataC-45StringC-45Parser-C-60C-42C-62_Applicative__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased arg-2 (lambda (eta-0) (DataC-45StringC-45Parser-C-60C-42C-62_Applicative__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased arg-2 (lambda (eta-1) (DataC-45StringC-45Parser-pure_Applicative__C-40ParseTC-32C-36mC-41 'erased 'erased arg-2 (lambda (eta-2) (lambda (eta-3) (vector 1 eta-2 eta-3))) eta-1)) arg-3 eta-0)) (lambda (eta-0) (DataC-45StringC-45Parser-many 'erased 'erased arg-2 arg-3 eta-0)) ext-0)))
(define DataC-45StringC-45Parser-skip (lambda (arg-0 arg-1 arg-2 ext-0) (PreludeC-45Interfaces-ignore 'erased 'erased (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (lambda (eta-0) (DataC-45StringC-45Parser-map_Functor__C-40ParseTC-32C-36mC-41 'erased 'erased 'erased arg-2 func arg-149 eta-0)))))) ext-0)))
(define DataC-45StringC-45Parser-satisfy (lambda (arg-0 arg-1 arg-2 ext-0) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (DataC-45StringC-45Parser-case--satisfy-7948 'erased arg-1 arg-2 ext-0 (PreludeC-45EqOrd-C-60_Ord__Int (let ((sc1 ext-0)) (let ((e-5 (vector-ref sc1 2))) e-5)) (let ((sc1 ext-0)) (let ((e-4 (vector-ref sc1 3))) e-4)))))))))
(define DataC-45StringC-45Parser-parseT (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) ((((arg-2 'erased) 'erased) (lambda (lcase-0) (let ((sc0 lcase-0)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (vector 1 (vector 0 e-1 (let ((sc1 e-2)) (let ((e-4 (vector-ref sc1 2))) e-4))))))) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 0 (DataC-45Strings-fastAppend (vector 1 "Parse failed at position " (vector 1 (PreludeC-45Show-show_Show__Int e-4) (vector 1 ": " (vector 1 e-5 (vector 0 )))))))))))))) (arg-3 (vector 0 arg-4 0 (DataC-45Strings-strLength arg-4))))))
(define DataC-45StringC-45Parser-parse (lambda (arg-0 arg-1 arg-2) (DataC-45StringC-45Parser-parseT 'erased 'erased (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased eta-2 eta-3))))) arg-1 arg-2)))
(define DataC-45StringC-45Parser-many (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (DataC-45StringC-45Parser-C-60C-124C-62_Alternative__C-40ParseTC-32C-36mC-41 'erased 'erased arg-2 (lambda (eta-0) (DataC-45StringC-45Parser-some 'erased 'erased arg-2 arg-3 eta-0)) (lambda (eta-0) (DataC-45StringC-45Parser-pure_Applicative__C-40ParseTC-32C-36mC-41 'erased 'erased arg-2 (vector 0 ) eta-0)) ext-0)))
(define DataC-45StringC-45Parser-char (lambda (arg-0 arg-1 arg-2 ext-0) (DataC-45StringC-45Parser-C-60C-63C-62 'erased 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1)) (lambda (eta-0) (DataC-45StringC-45Parser-satisfy 'erased arg-1 (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__Char arg-3 arg-2)) eta-0)) (PreludeC-45TypesC-45Strings-C-43C-43 "char " (PreludeC-45Show-show_Show__Char arg-2)) ext-0)))
(define DataC-45StringC-45Parser-C-60C-63C-62 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) ((((arg-2 'erased) 'erased) (lambda (lcase-0) (let ((sc0 lcase-0)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (vector 1 e-1 e-2)))) (else (let ((e-4 (vector-ref sc0 1))) (vector 0 e-4 arg-4))))))) (arg-3 ext-0))))
(define DataC-45List-case--lookupBy-1725 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (cond ((equal? sc0 0) (vector 1 arg-4)) (else (DataC-45List-lookupBy 'erased 'erased arg-6 arg-2 arg-5))))))
(define DataC-45List-case--filter-1600 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (vector 1 arg-1 (DataC-45List-filter 'erased arg-3 arg-2))) (else (DataC-45List-filter 'erased arg-3 arg-2))))))
(define DataC-45List-reverseOnto (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (DataC-45List-reverseOnto 'erased (vector 1 e-2 arg-1) e-3))))))))
(define DataC-45List-reverse (lambda (arg-0 ext-0) (DataC-45List-reverseOnto 'erased (vector 0 ) ext-0)))
(define DataC-45List-lookupBy (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (DataC-45List-case--lookupBy-1725 'erased 'erased arg-3 e-6 e-7 e-3 arg-2 ((arg-2 arg-3) e-6))))))))))))
(define DataC-45List-lookup (lambda (arg-0 arg-1 arg-2 ext-0 ext-1) (DataC-45List-lookupBy 'erased 'erased (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-3) (lambda (arg-4) ((e-1 arg-3) arg-4))))) ext-0 ext-1)))
(define DataC-45List-isSuffixOfBy (lambda (arg-0 arg-1 arg-2 arg-3) (DataC-45List-isPrefixOfBy 'erased arg-1 (DataC-45List-reverse 'erased arg-2) (DataC-45List-reverse 'erased arg-3))))
(define DataC-45List-isSuffixOf (lambda (arg-0 arg-1 ext-0 ext-1) (DataC-45List-isSuffixOfBy 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3))))) ext-0 ext-1)))
(define DataC-45List-isPrefixOfBy (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) 0)(else (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) 1)(else (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-3)) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (PreludeC-45Basics-C-38C-38 ((arg-1 e-1) e-4) (lambda () (DataC-45List-isPrefixOfBy 'erased arg-1 e-2 e-5)))))))))))))))))
(define DataC-45List-filter (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (DataC-45List-case--filter-1600 'erased e-2 e-3 arg-1 (arg-1 e-2)))))))))
(define DataC-45Either-rights (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (DataC-45Either-rights 'erased 'erased e-3)) (else (let ((e-9 (vector-ref sc1 1))) (vector 1 e-9 (DataC-45Either-rights 'erased 'erased e-3)))))))))))))
(define DataC-45Maybe-fromMaybe (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (arg-1)) (else (let ((e-2 (vector-ref sc0 1))) e-2))))))
(define DataC-45Strings-strSubstr (lambda (ext-0 ext-1 ext-2) (string-substr ext-0 ext-1 ext-2)))
(define DataC-45Strings-strLength (lambda (ext-0) (string-length ext-0)))
(define DataC-45Strings-strIndex (lambda (ext-0 ext-1) (string-ref ext-0 ext-1)))
(define DataC-45Strings-isSuffixOf (lambda (arg-0 arg-1) (DataC-45List-isSuffixOf 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq__Char arg-4 arg-5)))) (PreludeC-45Types-unpack arg-0) (PreludeC-45Types-unpack arg-1))))
(define DataC-45Strings-fastAppend (lambda (ext-0) (DataC-45Strings-fastConcat ext-0)))
(define ControlC-45MonadC-45Identity-pure_Applicative__Identity (lambda (arg-0 arg-1) arg-1))
(define ControlC-45MonadC-45Identity-map_Functor__Identity (lambda (arg-0 arg-1 arg-2 arg-3) (arg-2 arg-3)))
(define ControlC-45MonadC-45Identity-join_Monad__Identity (lambda (arg-0 arg-1) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-1 (lambda (eta-0) eta-0))))
(define ControlC-45MonadC-45Identity-__Impl_Monad_Identity (lambda () (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485)))))) (lambda (b) (lambda (a) (lambda (arg-644) (lambda (arg-645) (ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity 'erased 'erased arg-644 arg-645))))) (lambda (a) (lambda (arg-647) (ControlC-45MonadC-45Identity-join_Monad__Identity 'erased arg-647))))))
(define ControlC-45MonadC-45Identity-__Impl_Functor_Identity (lambda (ext-0 ext-1 ext-2 ext-3) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased ext-2 ext-3)))
(define ControlC-45MonadC-45Identity-__Impl_Applicative_Identity (lambda () (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-149) (ControlC-45MonadC-45Identity-map_Functor__Identity 'erased 'erased func arg-149))))) (lambda (a) (lambda (arg-482) (ControlC-45MonadC-45Identity-pure_Applicative__Identity 'erased arg-482))) (lambda (b) (lambda (a) (lambda (arg-483) (lambda (arg-485) (ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity 'erased 'erased arg-483 arg-485))))))))
(define ControlC-45MonadC-45Identity-C-62C-62C-61_Monad__Identity (lambda (arg-0 arg-1 arg-2 arg-3) (arg-3 arg-2)))
(define ControlC-45MonadC-45Identity-C-60C-42C-62_Applicative__Identity (lambda (arg-0 arg-1 arg-2 arg-3) (arg-2 arg-3)))
(define ControlC-45MonadC-45IdentityC-45Identity-runIdentity (lambda (arg-0 arg-1) arg-1))
(define SystemC-45Directory-case--dirEntry-2709 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (SystemC-45Directory-returnError 'erased 'erased arg-1)) (else (SystemC-45Directory-ok 'erased 'erased arg-1 (PreludeC-45IO-prim__getString arg-3)))))))
(define SystemC-45Directory-case--openDir-2626 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (SystemC-45Directory-returnError 'erased 'erased arg-1)) (else (SystemC-45Directory-ok 'erased 'erased arg-1 arg-3))))))
(define SystemC-45Directory-case--currentDir-2565 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 ))))) (else (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 1 (PreludeC-45IO-prim__getString arg-2))))))))))
(define SystemC-45Directory-case--returnError-2276 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 1 )))))) ((equal? sc0 1) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 2 )))))) ((equal? sc0 2) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 3 )))))) ((equal? sc0 3) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 4 )))))) ((equal? sc0 4) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 5 ))))))(else (let ((sc0 (let ((sc1 (let ((sc2 arg-2)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (vector 0 (vector 0 (PreludeC-45Num-C-45_Neg__Int arg-3 5)))))))))))
(define SystemC-45Directory-returnError (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-2)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-2)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (SystemC-45Directory-prim__fileErrno eta-0)))))) (lambda (err) (let ((sc1 err)) (cond ((equal? sc1 0) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 1 )))))) ((equal? sc1 1) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 2 )))))) ((equal? sc1 2) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 3 )))))) ((equal? sc1 3) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 4 )))))) ((equal? sc1 4) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 5 ))))))(else (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) (vector 0 (vector 0 (PreludeC-45Num-C-45_Neg__Int err 5)))))))))))))))
(define SystemC-45Directory-openDir (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (SystemC-45Directory-prim__openDir arg-2 eta-0)))))) (lambda (res) (SystemC-45Directory-case--openDir-2626 'erased arg-1 arg-2 res (PreludeC-45EqOrd-C-47C-61_Eq__Int (PrimIO-prim__nullAnyPtr res) 0))))))))
(define SystemC-45Directory-ok (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 (let ((sc2 arg-2)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (vector 1 arg-3))))))
(define SystemC-45Directory-dirEntry (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (SystemC-45Directory-prim__dirEntry arg-2 eta-0)))))) (lambda (res) (SystemC-45Directory-case--dirEntry-2709 'erased arg-1 arg-2 res (PreludeC-45EqOrd-C-47C-61_Eq__Int (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr 'erased res)) 0))))))))
(define SystemC-45Directory-currentDir (lambda (arg-0 arg-1) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (SystemC-45Directory-prim__currentDir eta-0)))))) (lambda (res) (SystemC-45Directory-case--currentDir-2565 'erased arg-1 res (PreludeC-45EqOrd-C-47C-61_Eq__Int (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr 'erased res)) 0))))))))
(define SystemC-45Directory-changeDir (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (SystemC-45Directory-prim__changeDir arg-2 eta-0)))))) (lambda (ok) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) (PreludeC-45EqOrd-C-61C-61_Eq__Int ok 0))))))))))
(define SystemC-45File-case--caseC-32blockC-32inC-32writeFile-1985 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (let ((sc2 (let ((sc3 arg-1)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-4 (vector-ref sc2 2))) ((((e-4 'erased) 'erased) (SystemC-45File-closeFile 'erased arg-1 arg-4)) (lambda (_-2009) (let ((sc3 (let ((sc4 (let ((sc5 arg-1)) (let ((e-6 (vector-ref sc5 1))) e-6)))) (let ((e-7 (vector-ref sc4 1))) e-7)))) (let ((e-6 (vector-ref sc3 2))) ((e-6 'erased) (vector 1 (vector 0 )))))))))))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((((e-2 'erased) 'erased) (SystemC-45File-closeFile 'erased arg-1 arg-4)) (lambda (_-2050) (let ((sc2 (let ((sc3 (let ((sc4 arg-1)) (let ((e-6 (vector-ref sc4 1))) e-6)))) (let ((e-7 (vector-ref sc3 1))) e-7)))) (let ((e-6 (vector-ref sc2 2))) ((e-6 'erased) (vector 0 e-5))))))))))))))
(define SystemC-45File-case--writeFile-1957 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-4 (vector-ref sc1 2))) ((((e-4 'erased) 'erased) (SystemC-45File-fPutStr 'erased arg-1 e-2 arg-2)) (lambda (_-0) (let ((sc2 _-0)) (case (vector-ref sc2 0) ((1) (let ((e-5 (vector-ref sc2 1))) (let ((sc3 e-5)) (let ((sc4 (let ((sc5 arg-1)) (let ((e-7 (vector-ref sc5 1))) e-7)))) (let ((e-7 (vector-ref sc4 2))) ((((e-7 'erased) 'erased) (SystemC-45File-closeFile 'erased arg-1 e-2)) (lambda (_-2009) (let ((sc5 (let ((sc6 (let ((sc7 arg-1)) (let ((e-10 (vector-ref sc7 1))) e-10)))) (let ((e-11 (vector-ref sc6 1))) e-11)))) (let ((e-10 (vector-ref sc5 2))) ((e-10 'erased) (vector 1 (vector 0 )))))))))))) (else (let ((e-5 (vector-ref sc2 1))) (let ((sc3 (let ((sc4 arg-1)) (let ((e-7 (vector-ref sc4 1))) e-7)))) (let ((e-7 (vector-ref sc3 2))) ((((e-7 'erased) 'erased) (SystemC-45File-closeFile 'erased arg-1 e-2)) (lambda (_-2050) (let ((sc4 (let ((sc5 (let ((sc6 arg-1)) (let ((e-10 (vector-ref sc6 1))) e-10)))) (let ((e-11 (vector-ref sc5 1))) e-11)))) (let ((e-10 (vector-ref sc4 2))) ((e-10 'erased) (vector 0 e-5)))))))))))))))))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 e-5))))))))))
(define SystemC-45File-case--caseC-32blockC-32inC-32readFile-1851 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-4 (vector-ref sc1 2))) ((((e-4 'erased) 'erased) (SystemC-45File-closeFile 'erased arg-1 arg-3)) (lambda (_-1873) (let ((sc2 (let ((sc3 (let ((sc4 arg-1)) (let ((e-6 (vector-ref sc4 1))) e-6)))) (let ((e-7 (vector-ref sc3 1))) e-7)))) (let ((e-6 (vector-ref sc2 2))) ((e-6 'erased) (vector 1 (DataC-45Strings-fastAppend e-2))))))))))) (else (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((((e-2 'erased) 'erased) (SystemC-45File-closeFile 'erased arg-1 arg-3)) (lambda (_-1911) (SystemC-45File-returnError 'erased 'erased arg-1))))))))))
(define SystemC-45File-case--readFile-1827 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-4 (vector-ref sc1 2))) ((((e-4 'erased) 'erased) (SystemC-45File-n--3431-1709-read 'erased arg-1 arg-2 (vector 0 ) e-2)) (lambda (_-0) (let ((sc2 _-0)) (case (vector-ref sc2 0) ((1) (let ((e-5 (vector-ref sc2 1))) (let ((sc3 (let ((sc4 arg-1)) (let ((e-7 (vector-ref sc4 1))) e-7)))) (let ((e-7 (vector-ref sc3 2))) ((((e-7 'erased) 'erased) (SystemC-45File-closeFile 'erased arg-1 e-2)) (lambda (_-1873) (let ((sc4 (let ((sc5 (let ((sc6 arg-1)) (let ((e-10 (vector-ref sc6 1))) e-10)))) (let ((e-11 (vector-ref sc5 1))) e-11)))) (let ((e-10 (vector-ref sc4 2))) ((e-10 'erased) (vector 1 (DataC-45Strings-fastAppend e-5))))))))))) (else (let ((sc3 (let ((sc4 arg-1)) (let ((e-7 (vector-ref sc4 1))) e-7)))) (let ((e-7 (vector-ref sc3 2))) ((((e-7 'erased) 'erased) (SystemC-45File-closeFile 'erased arg-1 e-2)) (lambda (_-1911) (SystemC-45File-returnError 'erased 'erased arg-1)))))))))))))) (else (SystemC-45File-returnError 'erased 'erased arg-1))))))
(define SystemC-45File-case--caseC-32blockC-32inC-32readFileC-44read-1773 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (SystemC-45File-n--3431-1709-read 'erased arg-1 arg-2 (vector 1 e-2 arg-4) arg-3))) (else (SystemC-45File-returnError 'erased 'erased arg-1))))))
(define SystemC-45File-case--readFileC-44read-1724 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 1 (DataC-45List-reverse 'erased arg-4)))))) (else (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((((e-2 'erased) 'erased) (SystemC-45File-fGetLine 'erased arg-1 arg-3)) (lambda (_-0) (let ((sc2 _-0)) (case (vector-ref sc2 0) ((1) (let ((e-4 (vector-ref sc2 1))) (SystemC-45File-n--3431-1709-read 'erased arg-1 arg-2 (vector 1 e-4 arg-4) arg-3))) (else (SystemC-45File-returnError 'erased 'erased arg-1)))))))))))))
(define SystemC-45File-case--fPutStr-1202 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (SystemC-45File-returnError 'erased 'erased arg-1)) (else (SystemC-45File-ok 'erased 'erased arg-1 (vector 0 )))))))
(define SystemC-45File-case--fGetLine-1011 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (SystemC-45File-returnError 'erased 'erased arg-1)) (else (SystemC-45File-ok 'erased 'erased arg-1 (PreludeC-45IO-prim__getString arg-3)))))))
(define SystemC-45File-case--openFile-766 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (SystemC-45File-returnError 'erased 'erased arg-1)) (else (SystemC-45File-ok 'erased 'erased arg-1 arg-4))))))
(define SystemC-45File-case--returnError-558 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 1 )))))) ((equal? sc0 1) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 2 )))))) ((equal? sc0 2) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 3 )))))) ((equal? sc0 3) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 4 )))))) ((equal? sc0 4) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 5 ))))))(else (let ((sc0 (let ((sc1 (let ((sc2 arg-2)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (vector 0 (vector 0 (PreludeC-45Num-C-45_Neg__Int arg-3 5)))))))))))
(define SystemC-45File-case--modeStr-527 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "ab+") (else "a+")))))
(define SystemC-45File-case--modeStr-517 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "wb+") (else "w+")))))
(define SystemC-45File-case--modeStr-507 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "rb+") (else "r+")))))
(define SystemC-45File-case--modeStr-497 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "ab") (else "a")))))
(define SystemC-45File-case--modeStr-487 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "wb") (else "w")))))
(define SystemC-45File-case--modeStr-477 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "rb") (else "r")))))
(define SystemC-45File-n--3431-1709-read (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (SystemC-45File-fEOF 'erased arg-1 arg-4)) (lambda (eof) (let ((sc1 eof)) (cond ((equal? sc1 0) (let ((sc2 (let ((sc3 (let ((sc4 arg-1)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 1 (DataC-45List-reverse 'erased arg-3)))))) (else (let ((sc2 (let ((sc3 arg-1)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-5 (vector-ref sc2 2))) ((((e-5 'erased) 'erased) (SystemC-45File-fGetLine 'erased arg-1 arg-4)) (lambda (_-0) (let ((sc3 _-0)) (case (vector-ref sc3 0) ((1) (let ((e-7 (vector-ref sc3 1))) (SystemC-45File-n--3431-1709-read 'erased arg-1 arg-2 (vector 1 e-7 arg-3) arg-4))) (else (SystemC-45File-returnError 'erased 'erased arg-1)))))))))))))))))
(define SystemC-45File-show_Show__FileError (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (PreludeC-45TypesC-45Strings-C-43C-43 "File error: " (PreludeC-45Show-show_Show__Int e-0)))) ((1) "File Read Error") ((2) "File Write Error") ((3) "File Not Found") ((4) "Permission Denied") (else "File Exists")))))
(define SystemC-45File-showPrec_Show__FileError (lambda (arg-0 arg-1) (SystemC-45File-show_Show__FileError arg-1)))
(define SystemC-45File-__Impl_Show_FileError (lambda () (vector 0 (lambda (x) (SystemC-45File-show_Show__FileError x)) (lambda (d) (lambda (x) (SystemC-45File-showPrec_Show__FileError d x))))))
(define SystemC-45File-writeFile (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (SystemC-45File-openFile 'erased arg-1 arg-2 (vector 1 ))) (lambda (_-0) (let ((sc1 _-0)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((sc2 (let ((sc3 arg-1)) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-6 (vector-ref sc2 2))) ((((e-6 'erased) 'erased) (SystemC-45File-fPutStr 'erased arg-1 e-4 arg-3)) (lambda (_-1) (let ((sc3 _-1)) (case (vector-ref sc3 0) ((1) (let ((e-8 (vector-ref sc3 1))) (let ((sc4 e-8)) (let ((sc5 (let ((sc6 arg-1)) (let ((e-10 (vector-ref sc6 1))) e-10)))) (let ((e-10 (vector-ref sc5 2))) ((((e-10 'erased) 'erased) (SystemC-45File-closeFile 'erased arg-1 e-4)) (lambda (_-2009) (let ((sc6 (let ((sc7 (let ((sc8 arg-1)) (let ((e-13 (vector-ref sc8 1))) e-13)))) (let ((e-14 (vector-ref sc7 1))) e-14)))) (let ((e-13 (vector-ref sc6 2))) ((e-13 'erased) (vector 1 (vector 0 )))))))))))) (else (let ((e-8 (vector-ref sc3 1))) (let ((sc4 (let ((sc5 arg-1)) (let ((e-10 (vector-ref sc5 1))) e-10)))) (let ((e-10 (vector-ref sc4 2))) ((((e-10 'erased) 'erased) (SystemC-45File-closeFile 'erased arg-1 e-4)) (lambda (_-2050) (let ((sc5 (let ((sc6 (let ((sc7 arg-1)) (let ((e-13 (vector-ref sc7 1))) e-13)))) (let ((e-14 (vector-ref sc6 1))) e-14)))) (let ((e-13 (vector-ref sc5 2))) ((e-13 'erased) (vector 0 e-8)))))))))))))))))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 (let ((sc3 (let ((sc4 arg-1)) (let ((e-6 (vector-ref sc4 1))) e-6)))) (let ((e-7 (vector-ref sc3 1))) e-7)))) (let ((e-6 (vector-ref sc2 2))) ((e-6 'erased) (vector 0 e-5))))))))))))))
(define SystemC-45File-returnError (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-2)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-2)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (SystemC-45File-prim__fileErrno eta-0)))))) (lambda (err) (let ((sc1 err)) (cond ((equal? sc1 0) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 1 )))))) ((equal? sc1 1) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 2 )))))) ((equal? sc1 2) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 3 )))))) ((equal? sc1 3) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 4 )))))) ((equal? sc1 4) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 5 ))))))(else (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) (vector 0 (vector 0 (PreludeC-45Num-C-45_Neg__Int err 5)))))))))))))))
(define SystemC-45File-readFile (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (SystemC-45File-openFile 'erased arg-1 arg-2 (vector 0 ))) (lambda (_-0) (let ((sc1 _-0)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((sc2 (let ((sc3 arg-1)) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-6 (vector-ref sc2 2))) ((((e-6 'erased) 'erased) (SystemC-45File-n--3431-1709-read 'erased arg-1 arg-2 (vector 0 ) e-4)) (lambda (_-1) (let ((sc3 _-1)) (case (vector-ref sc3 0) ((1) (let ((e-8 (vector-ref sc3 1))) (let ((sc4 (let ((sc5 arg-1)) (let ((e-10 (vector-ref sc5 1))) e-10)))) (let ((e-10 (vector-ref sc4 2))) ((((e-10 'erased) 'erased) (SystemC-45File-closeFile 'erased arg-1 e-4)) (lambda (_-1873) (let ((sc5 (let ((sc6 (let ((sc7 arg-1)) (let ((e-13 (vector-ref sc7 1))) e-13)))) (let ((e-14 (vector-ref sc6 1))) e-14)))) (let ((e-13 (vector-ref sc5 2))) ((e-13 'erased) (vector 1 (DataC-45Strings-fastAppend e-8))))))))))) (else (let ((sc4 (let ((sc5 arg-1)) (let ((e-10 (vector-ref sc5 1))) e-10)))) (let ((e-10 (vector-ref sc4 2))) ((((e-10 'erased) 'erased) (SystemC-45File-closeFile 'erased arg-1 e-4)) (lambda (_-1911) (SystemC-45File-returnError 'erased 'erased arg-1)))))))))))))) (else (SystemC-45File-returnError 'erased 'erased arg-1))))))))))
(define SystemC-45File-openFile (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (SystemC-45File-prim__open arg-2 (SystemC-45File-modeStr arg-3) eta-0)))))) (lambda (res) (SystemC-45File-case--openFile-766 'erased arg-1 arg-3 arg-2 res (PreludeC-45EqOrd-C-47C-61_Eq__Int (PrimIO-prim__nullAnyPtr res) 0))))))))
(define SystemC-45File-ok (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 (let ((sc2 arg-2)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (vector 1 arg-3))))))
(define SystemC-45File-modeStr (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (SystemC-45File-case--modeStr-477 (SystemC-45Info-isWindows))) ((1) (SystemC-45File-case--modeStr-487 (SystemC-45Info-isWindows))) ((2) (SystemC-45File-case--modeStr-497 (SystemC-45Info-isWindows))) ((3) (SystemC-45File-case--modeStr-507 (SystemC-45Info-isWindows))) ((4) (SystemC-45File-case--modeStr-517 (SystemC-45Info-isWindows))) (else (SystemC-45File-case--modeStr-527 (SystemC-45Info-isWindows)))))))
(define SystemC-45File-fPutStr (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (SystemC-45File-prim__writeLine arg-2 arg-3 eta-0)))))) (lambda (res) (SystemC-45File-case--fPutStr-1202 'erased arg-1 arg-2 arg-3 res (PreludeC-45EqOrd-C-61C-61_Eq__Int res 0))))))))
(define SystemC-45File-fGetLine (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (SystemC-45File-prim__readLine arg-2 eta-0)))))) (lambda (res) (SystemC-45File-case--fGetLine-1011 'erased arg-1 arg-2 res (PreludeC-45EqOrd-C-47C-61_Eq__Int (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr 'erased res)) 0))))))))
(define SystemC-45File-fEOF (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (SystemC-45File-prim__eof arg-2 eta-0)))))) (lambda (res) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) (PreludeC-45EqOrd-C-47C-61_Eq__Int res 0))))))))))
(define SystemC-45File-closeFile (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (SystemC-45File-prim__close arg-2 eta-0)))))))
(define SystemC-45Info-prim__os (lambda () (blodwen-os)))
(define SystemC-45Info-os (lambda () (blodwen-os)))
(define SystemC-45Info-isWindows (lambda () (PreludeC-45Types-elem 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (PreludeC-45EqOrd-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (PreludeC-45EqOrd-C-47C-61_Eq__String arg-4 arg-5)))) (SystemC-45Info-os) (vector 1 "windows" (vector 1 "mingw32" (vector 1 "cygwin32" (vector 0 )))))))
(define DataC-45StringC-45Extra-join (lambda (arg-0 arg-1 arg-2 arg-3) (DataC-45StringC-45Extra-drop (PreludeC-45TypesC-45Strings-length arg-1) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (((((e-2 'erased) 'erased) (lambda (acc) (lambda (x) (PreludeC-45TypesC-45Strings-C-43C-43 acc (PreludeC-45TypesC-45Strings-C-43C-43 arg-1 x))))) "") arg-3))))))
(define DataC-45StringC-45Extra-drop (lambda (arg-0 arg-1) (PreludeC-45Types-substr arg-0 (PreludeC-45TypesC-45Strings-length arg-1) arg-1)))
(load-shared-object "libidris2_support.dylib")
(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))
(PrimIO-unsafePerformIO 'erased (lambda (eta-0) (Main-main eta-0)))(collect 4)
(blodwen-run-finalisers))
